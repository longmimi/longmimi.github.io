<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LongTean&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://longmimi.github.io/"/>
  <updated>2017-10-22T15:58:27.523Z</updated>
  <id>http://longmimi.github.io/</id>
  
  <author>
    <name>LongTean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天一个知识点，万一有你不知道的</title>
    <link href="http://longmimi.github.io/2017/10/20/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%8C%E5%87%86%E6%9C%89%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84/"/>
    <id>http://longmimi.github.io/2017/10/20/每天一个知识点，准有你不知道的/</id>
    <published>2017-10-20T14:58:17.000Z</published>
    <updated>2017-10-22T15:58:27.523Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经常看脱口秀的朋友应该都知道有一个脱口秀演员“池子”，声称初中毕业的他每天最喜欢的就是给别人普及知识点，而我的这个想法也是受他的启发，每天在博客上总结一个自己学到的知识点，慢慢见证自己的成长。希望可以坚持下去。好了，废话不多说，我们开始吧。<br><a id="more"></a></p>
<hr>
<blockquote>
<p>10.22</p>
</blockquote>
<ul>
<li>关键词：’data-‘ 属性</li>
<li>html5中新增的用户自定义属性，有两种设置的方式<ul>
<li>最常用的就是直接写在标签中: data-xxx=”xxx”</li>
<li>也可以用过元素的dataset属性在js中设置：obj.dataset.xxx=”xxx”</li>
</ul>
</li>
<li>获取也有两种方式：<ul>
<li>obj.dataset.xxx</li>
<li>obj.dataset[xxx]</li>
</ul>
</li>
<li>需要注意的是如果自定义的属性中包含’-‘,那么在获取是应该使用驼峰法<ul>
<li>data-my-arr=”xxx”</li>
<li>获取: obj.dataset.myArr或obj.dataset[‘myArr’]</li>
</ul>
</li>
</ul>
<blockquote>
<p>10.21</p>
</blockquote>
<ul>
<li>关键词：毛玻璃效果</li>
<li>毛玻璃效果其实就是半透明+模糊的效果，可以使用css的filter实现<ul>
<li>filter:blur(*px); 这样做的话，整个内容都会全部模糊，为了保证文字不会模糊掉需要多一个层单独应用模糊效果</li>
<li>可以通过伪元素的方法来添加一个层级：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:after&#123;</div><div class="line">  content:'';</div><div class="line">  z-index:-1;   //为了是伪元素位于内容的下面</div><div class="line">  filter:blur(*px)  //设置模糊效果</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>10.20</p>
</blockquote>
<ul>
<li>关键词：锚点定位</li>
<li>锚点是什么？张鑫旭大神说锚点就等同于火影中的“飞雷神之术”。水门把有特殊印记的苦无放在任何地方。他就可以在瞬间移动到那个地方，页面中来看，苦无就是我们设置的锚点，而锚链就是我们的术。<ul>
<li>一般是用a标签的href属性=”#锚点”，而要跳转的地方给id=”锚点”</li>
<li>如果是跳转到页面外的话，在网页链接后面加#锚点</li>
<li>说到这里，h5中也有一个方法可以实现同样的效果，scrollIntoView(),这个以后再说  ：)</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;经常看脱口秀的朋友应该都知道有一个脱口秀演员“池子”，声称初中毕业的他每天最喜欢的就是给别人普及知识点，而我的这个想法也是受他的启发，每天在博客上总结一个自己学到的知识点，慢慢见证自己的成长。希望可以坚持下去。好了，废话不多说，我们开始吧。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://longmimi.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://longmimi.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="知识点" scheme="http://longmimi.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>图片预加载</title>
    <link href="http://longmimi.github.io/2017/10/15/%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    <id>http://longmimi.github.io/2017/10/15/图片预加载/</id>
    <published>2017-10-15T15:40:10.000Z</published>
    <updated>2017-10-16T07:16:57.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在慕课上学习了图片的预加载，写一篇博客总结一下，方便以后复习，并与后面的懒加载作对比。</p>
</blockquote>
<h3 id="什么是图片预加载"><a href="#什么是图片预加载" class="headerlink" title="什么是图片预加载"></a>什么是图片预加载</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;预知用户将发生的行为，提前加载用户所需要的图片。换句话说，就是在网页全部加载之前，提前加载图片。当用户需要查看时可直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白。可分为无序加载和有序加载<br><a id="more"></a></p>
<h4 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h4><ul>
<li>网站的loading页<ul>
<li>在显示加载中的缓冲标志时，正在疯狂加载需要的图片，而需要显示图片时，就不需要向服务器请求，直接从缓存中加载就可以了。   </li>
</ul>
</li>
</ul>
<h3 id="实现的方法"><a href="#实现的方法" class="headerlink" title="实现的方法"></a>实现的方法</h3><ul>
<li><p>使用css的background属性将图片预加载到屏幕看不到的地方，就像下面这样，只要图片存储的路径不改变，在其他地方调用这些图片是，浏览器就会在渲染过程中使用预加载（缓存）的图片，不需要使用css，但这种方法存在一些问题，会增加页面的整体加载时间,可以通过js来延迟加载预加载的图片</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">preload-01 &#123; background: url(-01.png) no-repeat -9999px -9999px; &#125;</div><div class="line">//也可以设置</div><div class="line">&#123; width: 0; height: 0; display: none&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>还可以通过js来实现预加载，这里打个小广告：这是一个<a href="https://github.com/longmimi/preloadImg" target="_blank" rel="external">预加载插件</a>，有兴趣的同学可以看看。  </p>
</li>
<li><p>这里再贴出网上的一些实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hidden"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></span></div><div class="line">        <span class="comment">&lt;!--//--&gt;</span>&lt;![CDATA[//&gt;&lt;!--</div><div class="line">            var images = new Array()</div><div class="line">            function preload() &#123;</div><div class="line">                for (i = 0; i &lt; preload.arguments.length; i++) &#123;</div><div class="line">                    images[i] = new Image()</div><div class="line">                    images[i].src = preload.arguments[i]</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            preload(</div><div class="line">                ";,</div><div class="line">                ";,</div><div class="line">                ";</div><div class="line">            )</div><div class="line">        //--&gt;&lt;!]]&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>还有就是通过ajax实现预加载，不仅可以加载图片，还可以预加载css，js等。比直接使用js的好处在于加载js和css不会影响到当前页面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        <span class="comment">// XHR to request a JS and a CSS  </span></div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();  </div><div class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://domain.tld/preload.js'</span>);  </div><div class="line">        xhr.send(<span class="string">''</span>);  </div><div class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();  </div><div class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://domain.tld/preload.css'</span>);  </div><div class="line">        xhr.send(<span class="string">''</span>);  </div><div class="line">        <span class="comment">// preload image  </span></div><div class="line">        <span class="keyword">new</span> Image().src = <span class="string">"http://domain.tld/preload.png"</span>;  </div><div class="line">    &#125;, <span class="number">1000</span>);  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面代码预加载了“preload.js”、“preload.css”和“preload.png”。1000毫秒的延时是为了防止脚本挂起，而导致正常页面出现功能问题。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>  <a href="http://blog.csdn.net/sunshine940326/article/details/53536535?locationNum=3&amp;fps=1" target="_blank" rel="external">参考一</a><br>  <a href="http://www.cnblogs.com/haoyijing/p/5818236.html" target="_blank" rel="external">参考二</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在慕课上学习了图片的预加载，写一篇博客总结一下，方便以后复习，并与后面的懒加载作对比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是图片预加载&quot;&gt;&lt;a href=&quot;#什么是图片预加载&quot; class=&quot;headerlink&quot; title=&quot;什么是图片预加载&quot;&gt;&lt;/a&gt;什么是图片预加载&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;预知用户将发生的行为，提前加载用户所需要的图片。换句话说，就是在网页全部加载之前，提前加载图片。当用户需要查看时可直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白。可分为无序加载和有序加载&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://longmimi.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="预加载" scheme="http://longmimi.github.io/tags/%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>文章加密</title>
    <link href="http://longmimi.github.io/2017/10/13/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/"/>
    <id>http://longmimi.github.io/2017/10/13/加密测试/</id>
    <published>2017-10-13T07:11:07.000Z</published>
    <updated>2017-10-13T08:35:33.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加密访问"><a href="#加密访问" class="headerlink" title="加密访问"></a>加密访问</h1><blockquote>
<p>加密的原理</p>
</blockquote>
<ul>
<li>hexo编译出来的文章都是纯净态的，因此文章中所有信息都会原封不动的加载到文章中，利用js的阻塞机制，当alert的时候，页面会停止加载，等到用户点击后才会继续加载，所以把alert写在script中，利用prompt()函数。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</div><div class="line">			<span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>,<span class="string">''</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</div><div class="line">				alert(<span class="string">'密码私信我！！'</span>);</div><div class="line">				history.back();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>关于这个page.password,其实是初始化每篇文章的时候生成的顶部的变量，就像这样</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 文章加密</div><div class="line">date: 2017-10-13 15:50:52</div><div class="line">tags: 功能</div><div class="line">categories: 博客</div><div class="line">description: 为文章添加了访问密码</div><div class="line">password: longtean</div><div class="line">---</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      为文章添加了访问密码:longtean
    
    </summary>
    
      <category term="博客" scheme="http://longmimi.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="功能" scheme="http://longmimi.github.io/tags/%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>vue2组件通信</title>
    <link href="http://longmimi.github.io/2017/08/11/vue2%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://longmimi.github.io/2017/08/11/vue2父子组件通信/</id>
    <published>2017-08-11T03:49:41.000Z</published>
    <updated>2017-08-17T02:43:38.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近在学习vue2，这是我写的组件通信的简单小例子</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>子组件向父组件发送数据：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件，我从子组件获取来的数据:&#123;&#123;sonWords&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">com1</span> <span class="attr">v-on:son-send-to-me</span>=<span class="string">"listenMySon"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">com1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="attr">el</span>:<span class="string">'#box'</span>,</div><div class="line"><span class="attr">data</span>:&#123;</div><div class="line">    <span class="attr">sonWords</span>:<span class="string">''</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">components</span>:&#123;</div><div class="line">    <span class="attr">com1</span>:&#123;</div><div class="line">        <span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           <span class="keyword">var</span> data = &#123;</div><div class="line">            <span class="attr">msg</span>:<span class="string">"我是子组件的数据啊"</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> data</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">template</span>:<span class="string">'&lt;div&gt;&lt;button @click="click"&gt;点击我向父组件发送数据&lt;/button&gt;&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">methods</span>:&#123;</div><div class="line">          click()&#123;</div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'son-send-to-me'</span>,<span class="keyword">this</span>.msg);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>:&#123;</div><div class="line">    <span class="attr">listenMySon</span>:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.sonWords = msg;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>父组件向子组件发送数据：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"> 请输入你要传给子组件的数据： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputmsg"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">com1</span> <span class="attr">v-bind:my-message</span>=<span class="string">"message"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;h1&gt;这是添加的内容&lt;/h1&gt; --&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">com1</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"> 请输入你要传给子组件的数据： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputmsg2"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">com2</span> <span class="attr">v-bind:my-message2</span>=<span class="string">"message2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是添加的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">com2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件的模板 这是我从父组件获取来的数据:&#123;&#123;myMessage&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>点击我获取父组件的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是默认的内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件的模板 这是我从父组件获取来的数据:&#123;&#123;myMessage2&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn2"</span>&gt;</span>点击我获取父组件的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是默认的内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>:<span class="string">'#box'</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line">      <span class="attr">message</span>:<span class="string">''</span>,</div><div class="line">      <span class="attr">message2</span>:<span class="string">''</span>,</div><div class="line">      <span class="attr">inputmsg</span>:<span class="string">''</span>,</div><div class="line">      <span class="attr">inputmsg2</span>:<span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">components</span>:&#123;</div><div class="line">        <span class="attr">com1</span>:&#123;</div><div class="line">            <span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">               <span class="keyword">var</span> data = &#123;</div><div class="line">                <span class="attr">messageSon</span>:<span class="string">"这是组件的data，他必须是一个函数"</span></div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span> data</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">template</span>:<span class="string">'#app'</span> ,</div><div class="line">            <span class="attr">props</span>:&#123;</div><div class="line">                    <span class="attr">myMessage</span>: <span class="built_in">String</span> <span class="comment">//这样可以指定传入的类型，如果类型不对，会警告</span></div><div class="line">                  &#125;,</div><div class="line">            <span class="attr">methods</span>:&#123;</div><div class="line">              btn()&#123;</div><div class="line">               vm.message = vm.inputmsg</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">com2</span>:&#123;</div><div class="line">            <span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">               <span class="keyword">var</span> data2 = &#123;</div><div class="line">                <span class="attr">messageSon</span>:<span class="string">"这是组件的data，他必须是一个函数"</span></div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span> data2</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">template</span>:<span class="string">'#app2'</span> ,</div><div class="line">            <span class="attr">props</span>:&#123;</div><div class="line">                    <span class="attr">myMessage2</span>: <span class="built_in">String</span> <span class="comment">//这样可以指定传入的类型，如果类型不对，会警告</span></div><div class="line">                  &#125;,</div><div class="line">            <span class="attr">methods</span>:&#123;</div><div class="line">              btn2()&#123;</div><div class="line">               vm.message2 = vm.inputmsg2</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>兄弟组件通信：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">com-c</span>&gt;</span><span class="tag">&lt;/<span class="name">com-c</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">  &lt;script&gt;</div><div class="line"><span class="keyword">var</span> Event = <span class="keyword">new</span> Vue();</div><div class="line"></div><div class="line"> <span class="keyword">var</span> A = &#123;</div><div class="line">  <span class="comment">//此处使用ES6语法  字符串链接  ` `</span></div><div class="line">  template:<span class="string">`</span></div><div class="line">                &lt;div&gt;</div><div class="line">                    &lt;span&gt;我是A组件&lt;/span&gt; -&gt; &#123;&#123;a&#125;&#125;</div><div class="line">                    &lt;input type="button" value="把A数据给C" @click="send"&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            `,</div><div class="line">  data()&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">       <span class="attr">a</span>:<span class="string">"我是a数据"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>:&#123;</div><div class="line">    <span class="attr">send</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      Event.$emit(<span class="string">'a-msg'</span>,<span class="keyword">this</span>.a);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> B = &#123;</div><div class="line">  <span class="attr">template</span>:<span class="string">'&lt;div&gt;&lt;span&gt;我是b组件&lt;/span&gt; -&gt; &#123;&#123;b&#125;&#125; &lt;input type="button" value="把A数据给C" @click="send"&gt;&lt;/div&gt;'</span>,</div><div class="line">  data()&#123;</div><div class="line">     <span class="keyword">return</span> &#123;</div><div class="line">       <span class="attr">b</span>:<span class="string">"我是b数据"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>:&#123;</div><div class="line">    send()&#123;</div><div class="line">      Event.$emit(<span class="string">'b-msg'</span>,<span class="keyword">this</span>.b)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> <span class="keyword">var</span> C = &#123;</div><div class="line">   <span class="attr">template</span>:<span class="string">`</span></div><div class="line">                &lt;div&gt;</div><div class="line">                    &lt;h3&gt;我是C组件&lt;/h3&gt;</div><div class="line">                    &lt;span&gt;接收过来的A的数据为: &#123;&#123;a&#125;&#125;&lt;/span&gt;</div><div class="line">                    &lt;br&gt;</div><div class="line">                    &lt;span&gt;接收过来的B的数据为: &#123;&#123;b&#125;&#125;&lt;/span&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            `,</div><div class="line">            data()&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">a</span>:<span class="string">''</span>,</div><div class="line">                    <span class="attr">b</span>:<span class="string">''</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            mounted()&#123;</div><div class="line">                <span class="comment">// var _this=this;</span></div><div class="line">                <span class="comment">// Event.$on('a-msg',function(a)&#123;</span></div><div class="line">                <span class="comment">//     _this.a=a;</span></div><div class="line">                <span class="comment">// &#125;)</span></div><div class="line">                 Event.$on(<span class="string">'a-msg'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.a=a;</div><div class="line">                  &#125;.bind(<span class="keyword">this</span>));</div><div class="line">                 Event.$on(<span class="string">'b-msg'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.b=b;</div><div class="line">                  &#125;.bind(<span class="keyword">this</span>));</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>:<span class="string">'#box'</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">components</span>:&#123;</div><div class="line">      <span class="string">"com-a"</span>:A,</div><div class="line">      <span class="string">"com-b"</span>:B,</div><div class="line">      <span class="string">"com-c"</span>:C</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>补充组件的声明周期函数</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"change"</span> <span class="attr">value</span>=<span class="string">"更新"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"destory"</span> <span class="attr">value</span>=<span class="string">"销毁组件"</span>&gt;</span></div><div class="line">  &#123;&#123;msg&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">  &lt;script&gt;</div><div class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>:<span class="string">'#box'</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line">      <span class="attr">msg</span>:<span class="string">'welcome vue2.4'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">      <span class="attr">change</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(event);</div><div class="line">        <span class="keyword">this</span>.msg = <span class="string">"哈哈"</span></div><div class="line">       &#125;,</div><div class="line">       destory()&#123;</div><div class="line">        <span class="keyword">this</span>.$destroy()</div><div class="line">       &#125;</div><div class="line">    &#125;,</div><div class="line">    beforeCreate()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"beforeCreate:组件刚刚被创建,此时组件的属性还没有被定义"</span>+<span class="keyword">this</span>.msg)</div><div class="line">    created()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"created：实例已经创建完成，属性已经绑定"</span>+ <span class="keyword">this</span>.msg)</div><div class="line">    &#125;,</div><div class="line">    beforeMount()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"beforeMount：模板编译之前"</span>+ <span class="keyword">this</span>.msg)</div><div class="line">    &#125;,</div><div class="line">    mounted()&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">"beforeMount：模板编译完成"</span>+ <span class="keyword">this</span>.msg)</div><div class="line">    &#125;,</div><div class="line">    beforeUpdate()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"组件更新之前"</span>+<span class="keyword">this</span>.msg)</div><div class="line">    &#125;,</div><div class="line">    updated()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"组件已经更新"</span>+<span class="keyword">this</span>.msg)</div><div class="line">    &#125;,</div><div class="line">    beforeDestroy()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"组件销毁之前"</span>+<span class="keyword">this</span>.msg)</div><div class="line">    &#125;,</div><div class="line">    destroyed()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"组件销毁后"</span>+<span class="keyword">this</span>.msg)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近在学习vue2，这是我写的组件通信的简单小例子&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://longmimi.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://longmimi.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vue" scheme="http://longmimi.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>水平垂直居中及flex布局</title>
    <link href="http://longmimi.github.io/2017/07/28/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%8F%8Aflex%E5%B8%83%E5%B1%80/"/>
    <id>http://longmimi.github.io/2017/07/28/水平垂直居中及flex布局/</id>
    <published>2017-07-28T14:31:13.000Z</published>
    <updated>2017-09-19T07:09:21.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><blockquote>
<p>如果要实现水平居中，严格来说满足以下条件才能称为水平居中：①父元素必须是块级盒子容器②父元素宽度必须已经被设定好</p>
</blockquote>
<p> 假设有以下场景，子元素是块级元素，但是没有设置宽度，那么就会充满整个父元素；<br>                             子元素是行内元素，宽度由自身内容撑开； 可以设置text-align实现；<br>                             最常见的是   子元素是块元素，宽度已经确定：①：margin:0 auto<br>                             ②通过计算 设置父元素的padding为子元素宽高的一半 （此处可以设置box-sizing:boeder-box(元素宽高为content，默认是width+padding+margin)）；也可以设置子元素margin<br>                             ③绝对定位</p>
<a id="more"></a>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><blockquote>
<p>同样的，父元素是块级元素，有高度<br>​</p>
</blockquote>
<p>假设以下场景，①子元素行内，高度是内容撑开，可以设置父元素 line-height为子元素高度<br>                         ②子元素是块级元素，但是没有设置高度（无法设置margin，padding），但是可以给父元素设定 display:table-cell;vertical-align:middle;   flex方法也可以（父元素 flex ; flex-drection;justify- content:center）<br>                        ③子元素是块级元素高度确定，可以设置子元素margin，父元素padding<br>                        绝对定位</p>
<blockquote>
<p>水平垂直居中<br>​</p>
<ul>
<li>flex<br>  父元素设置display：flex;justify-content:center;align-items:center;<ul>
<li>示例<br><iframe height="265" scrolling="no" title="jLbmzQ" src="//codepen.io/longtean/embed/jLbmzQ/?height=265&theme-id=0&default-tab=css&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/jLbmzQ/" target="_blank" rel="external">jLbmzQ</a> by LongTean (<a href="https://codepen.io/longtean" target="_blank" rel="external">@longtean</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe><br>​<br>​</li>
</ul>
</li>
<li>absolute<br>​<br><iframe height="265" scrolling="no" title="jLbmzQ" src="//codepen.io/longtean/embed/jLbmzQ/?height=265&theme-id=0&default-tab=css&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/jLbmzQ/" target="_blank" rel="external">jLbmzQ</a> by LongTean (<a href="https://codepen.io/longtean" target="_blank" rel="external">@longtean</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe><br>​</li>
<li>margin:auto<br>  父元素设置relative   子元素 绝对定位  ；margin：auto； left：0；top:0;right:0;bottom:0;</li>
<li>负margin法<br> 绝对定位top和left50%；然后设置负向margin“补偿”回一半    （其实也可以设置成其他百分比，因为浏览器对盒子模型解析不同，都需要使用ｍａｒｇｉｎ来调节）<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.container&#123;</div><div class="line">      width: 500px;</div><div class="line">      height: 400px;</div><div class="line">      border: 2px solid #379;</div><div class="line">      position: relative;</div><div class="line"> &#125;</div><div class="line"> .inner&#123;</div><div class="line">      width: 180px;</div><div class="line">      height: 210px;</div><div class="line">      background-color: #746;</div><div class="line">      position: absolute;</div><div class="line">      top: 50%;</div><div class="line">      left: 50%;</div><div class="line">      margin-top: -90px; /*height的一半*/</div><div class="line">      margin-left: -105px; /*width的一半*/</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>​</p>
<ul>
<li>table-cell法<br> 父级元素 dispaly:table-cell;vertical-align:middle;text-align:center;<br> 子元素必须是行内元素   设置 vertical-align：middle;</li>
</ul>
<h2 id="总结flex布局"><a href="#总结flex布局" class="headerlink" title="总结flex布局"></a>总结flex布局</h2><pre><code>flex布局的核心概念是`容器`和`轴` ，分别是父容器和子容器，主轴和交叉轴，（可以使用）
</code></pre><ul>
<li>容器<ul>
<li>特点：容器具有这样的特点：父容器可以统一设置子容器的排列方式，子容器也可以单独设置自身的排列方式，如果两者同时设置，以子容器的设置为准</li>
<li>常用属性：<ul>
<li>父容器：<ul>
<li>①justify-content:  用来设置子容器如何沿着主轴排列  flex-start | flex-end  | center | space-between | 起始端对齐|居中端对齐|末尾端对齐 |  均匀分布</li>
<li>②align-items: 用来设置子容器如何沿着交叉轴分配纸容器之间的距离  flex-start | flex-end  | center | baseline | stretch | 沿基线对齐 | 尺寸拉伸与父元素一直</li>
</ul>
</li>
</ul>
</li>
<li>子容器：<ul>
<li>①flex  如何在主轴上伸缩   单值 | 两个值 | 三个值 | none<ul>
<li>宽/高  ：10em . 30px  auto content</li>
<li>无单位 ： 1  2</li>
<li>1 30px</li>
<li>2 2</li>
<li>1 1  10%</li>
</ul>
</li>
<li>②align-self;  设置子容器沿交叉轴分布  可选属性同父容器align-items 以子容器设置为主</li>
</ul>
</li>
</ul>
</li>
<li><p>轴：</p>
<pre><code>* flex-direction: 决定主轴方向  主轴交叉轴垂直
</code></pre><ul>
<li>其他属性<ul>
<li>父容器<ul>
<li>flex-wrap :决定子容器是否换行排列：nowrap | wrap | wrap-reverse | 不换行 | 换行 | 反向换行</li>
<li>align-content : 设置多行子容器之间的对齐方式 方式同 align-items</li>
</ul>
</li>
<li>子容器<ul>
<li>flex-basis : 在不伸缩情况下子容器的原始尺寸 主轴横代表宽度   纵向 代表高度</li>
<li>flex-grow : 子容器弹性伸缩的比例</li>
<li>order : 顺序</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>最后一个思维导图总结<br><img src="/images/flex.png" alt="&quot;flex&quot;"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如果要实现水平居中，严格来说满足以下条件才能称为水平居中：①父元素必须是块级盒子容器②父元素宽度必须已经被设定好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 假设有以下场景，子元素是块级元素，但是没有设置宽度，那么就会充满整个父元素；&lt;br&gt;                             子元素是行内元素，宽度由自身内容撑开； 可以设置text-align实现；&lt;br&gt;                             最常见的是   子元素是块元素，宽度已经确定：①：margin:0 auto&lt;br&gt;                             ②通过计算 设置父元素的padding为子元素宽高的一半 （此处可以设置box-sizing:boeder-box(元素宽高为content，默认是width+padding+margin)）；也可以设置子元素margin&lt;br&gt;                             ③绝对定位&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://longmimi.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://longmimi.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="flex" scheme="http://longmimi.github.io/tags/flex/"/>
    
      <category term="居中" scheme="http://longmimi.github.io/tags/%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记</title>
    <link href="http://longmimi.github.io/2017/04/23/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://longmimi.github.io/2017/04/23/jQuery学习笔记/</id>
    <published>2017-04-22T17:10:59.000Z</published>
    <updated>2017-08-11T03:58:44.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;暑假的时候虽然说学习过一遍jQuery了，但只是眼过一遍，熟悉了基本的使用并没有做记录，趁着学校这两天学校运动会放假，决定整理一篇jQuery的笔记，方便以后复习,以上均通过<a href="http://www.w3cschool.cn/jquery/" target="_blank" rel="external">w3school</a>学习。</p>
<hr>
<h2 id="课程章结"><a href="#课程章结" class="headerlink" title="课程章结"></a>课程章结</h2><h3 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h3><p><strong>关键词</strong>：<strong>简介</strong>、<strong>安装</strong>、<strong>语法</strong>、<strong>选择器</strong>、<strong>事件</strong>、<strong>名称冲突</strong></p>
<ul>
<li>简介：jQuery是一个JavaScript函数库,它的宗旨是“write less，do more”,也就是一个轻量级的”写的少，做的多”的JavaScript库。<a id="more"></a></li>
<li><p>安装：    </p>
<ul>
<li>下载<a href="http://jquery.com/download/" target="_blank" rel="external">jQuery</a>到本地，从本地载入</li>
<li>引用CDN中加载jQuery<ul>
<li>使用以下代码可以加载CDN，使用引用CDN的方式有一个很大的优势就是许多用户在访问其他站点的时候已经加载过jQuery，结果就是当这些人访问站点时，会直接从缓存中加载jQuery，从而减少加载时间。而且，大多数CDN都可以确保用户在请求文件时，从最近的服务器上返回响应，从而提高加载速度；<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>语法：</p>
<ul>
<li>jQuery的基本语法是<code>$(selector).action()</code><ul>
<li>美元符号定义 jQuery</li>
<li>选择符（selector）”查询”和”查找” HTML 元素</li>
<li>action()函数 执行对元素的操作</li>
</ul>
</li>
<li>为了防止文档在完全加载（就绪）之前运行 jQuery 代码，<code>$(document).ready(function(){});</code>将jQuery函数写在这个函数中</li>
</ul>
</li>
<li>选择器<ul>
<li>常见的选择器有以下几种：<ul>
<li>元素选择器：<code>$(&#39;p&#39;)</code></li>
<li>id选择器：<code>$(&#39;#id&#39;)</code></li>
<li>.class选择器：<code>$(&quot;.class&quot;)</code></li>
<li><code>$(&#39;p.test&#39;)</code>表示选择类别名为test的p标签</li>
<li><code>$(&quot;a[target=&#39;_blank&#39;]&quot;)</code>：表示选取所有<code>target</code>属性值为<code>_blank</code>的<code>a</code>标签</li>
<li>更多可参考<a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp" target="_blank" rel="external">jquery选择器手册</a></li>
</ul>
</li>
</ul>
</li>
<li>事件<ul>
<li>jQuery事件处理方法是jQuery的核心函数，事件处理程序指的是当HTML中发生某些事件所调用的方法，也叫作“触发”；（通常把jQuery代码放在<head>部分的事件处理方法中；详细的事件参考<a href="http://www.w3school.com.cn/jquery/jquery_ref_events.asp" target="_blank" rel="external">jQuery事件手册</a> </head></li>
<li>可以分为：鼠标事件（click），键盘事件(keypress)，表单事件(submit)，文档/窗口事件(load、scroll)等等</li>
<li>实例:<ul>
<li><code>$(this).hide()</code> - 隐藏当前元素</li>
<li><code>$(&quot;p&quot;).hide()</code> - 隐藏所有段落</li>
<li><code>$(&quot;p .test&quot;).hide()</code> - 隐藏所有 class=”test” 的段落</li>
<li><code>$(&quot;#test&quot;).hide()</code> - 隐藏所有 id=”test” 的元素</li>
<li><code>$(&#39;p&#39;).click(function(){});</code>-点击p元素执行函数</li>
</ul>
</li>
</ul>
</li>
<li>名称冲突<ul>
<li>由于其他库也可能使用$符号，那么就会引起冲突，jQuery中使用noConflict()方法来解决这个问题</li>
<li>注意事项<ul>
<li>把所有的jQuery代码置于事件处理函数中；</li>
<li>把所有事件处理函数置于文档就绪事件处理器中；</li>
<li>把jQuery代码置于单独的.js文件中;</li>
<li>如果存在名称冲突，则重命名jQuery库；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><em>示例</em></p>
<iframe height="265" scrolling="no" title="jQuery1" src="//codepen.io/longtean/embed/vmGQyj/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/vmGQyj/" target="_blank" rel="external">jQuery1</a> by LongTean (<a href="http://codepen.io/longtean" target="_blank" rel="external">@longtean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h3 id="jquery效果"><a href="#jquery效果" class="headerlink" title="jquery效果"></a>jquery效果</h3><p><strong>关键词</strong>：<strong>隐藏显示</strong>、<strong>淡入淡出</strong>、<strong>滑动</strong>、<strong>动画</strong>、<strong>stop()</strong>、<strong>callback方法</strong>、<strong>chaining</strong></p>
<ul>
<li>显示隐藏<ul>
<li>show(),hide(),比如隐藏的使用语法为：<code>$(&#39;selector&#39;).hide(speed,callback)</code>,其中speed为速度，callback为完成隐藏动作后执行的函数，另外，toggle()可以显示和隐藏</li>
</ul>
</li>
<li>淡入淡出<ul>
<li>有fadeIn(),fadeToggle(),fadeTo(),使用语法同上，fadeTo(speed,opacity,callback)可以改变透明度。</li>
</ul>
</li>
<li>滑动<ul>
<li>slideDown(),slideToggle(speed，callback)</li>
</ul>
</li>
<li><p>动画</p>
<ul>
<li><p>animate()方法,使用语法为<code>$(selector).animate({params},speed,callback);</code>必需的 params 参数定义形成动画的 CSS 属性,可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒,可选的 callback 参数是动画完成后所执行的函数名称。</p>
<ul>
<li><p>例:点击按钮，将div元素向右移动250px的同时，将透明度变为0.5且高度变为150px宽边为150px</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		$(<span class="string">"div"</span>).animate(&#123;</div><div class="line">  		<span class="attr">left</span>:<span class="string">'250px'</span>,</div><div class="line">  		<span class="attr">opacity</span>:<span class="string">'0.5'</span>,</div><div class="line">  		<span class="attr">height</span>:<span class="string">'150px'</span>,</div><div class="line">  		<span class="attr">width</span>:<span class="string">'150px'</span></div><div class="line">			&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>需要注意的是css属性名必须像这么写：marginLeft。。。骆驼命名法吧</p>
</li>
</ul>
</li>
</ul>
</li>
<li>stop()<ul>
<li>用来在动画或效果完成前对他们停止，使用语法<code>$(selector).stop(stopAll,goToEnd);</code>,其中可选参数stopAll规定是否应该清除动画队列，默认是false，即仅停止活动的动画，但允许队列中的其他动画执行；可选参数goToEnd表示是否立即完成当前动画，默认为false；</li>
</ul>
</li>
<li>callback()<ul>
<li>此函数在当前动画100%完成之后执行；因为JS语句是逐一执行的，为了避免因为动画还没执行完成而造成动画与之后的语句之间可能产生的错误或者页面冲突，建议以参数的形式添加Callback函数；</li>
</ul>
</li>
<li>chaining<pre><code>* Chaining允许我们在一条语句中添加多个方法，例如`$(&apos;p&apos;).css(&apos;color&apos;, &apos;red&apos;).slideUp(2000).slideDown(2000);`，这是p元素就会先改变css样式，然后收缩，最后张开；
</code></pre><em>示例</em><iframe height="265" scrolling="no" title="jQuery2" src="//codepen.io/longtean/embed/BRKbQv/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/BRKbQv/" target="_blank" rel="external">jQuery2</a> by LongTean (<a href="http://codepen.io/longtean" target="_blank" rel="external">@longtean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

</li>
</ul>
<h1 id="jquery-HTML"><a href="#jquery-HTML" class="headerlink" title="jquery HTML"></a>jquery HTML</h1><p><strong>关键词</strong>：<strong>捕获</strong>、<strong>设置</strong>、<strong>添加</strong>、<strong>删除</strong>、<strong>css类</strong>、<strong>css()</strong>、<strong>尺寸</strong></p>
<ul>
<li>捕获<ul>
<li>操作DOM的常用方法<ul>
<li><code>text()</code> - 设置或返回所选元素的文本内容</li>
<li><code>html()</code> - 设置或返回所选元素的内容（包括 HTML 标记）</li>
<li><code>val()</code> - 设置或返回表单字段的值</li>
</ul>
</li>
<li>获取属性的方法<ul>
<li><code>attr()</code>- 用于获取属性值</li>
</ul>
</li>
</ul>
</li>
<li>设置<ul>
<li>设置内容也是用上一节提到的三个函数，不过需要在括号中加入需要设置的内容；</li>
<li>同时需要知道，这三个jQuery方法都拥有回调函数，函数有两个参数，分别为被选元素列表中当前元素的下标以及原始值，text()、html() 以及 val() 的回调函数；</li>
<li>利用attr()来设置属性时可以同时设置多个属性，属性之间利用逗号隔开，此方法同样具有回调函数；</li>
</ul>
</li>
<li>添加元素<ul>
<li>利用jQuery可以很容易的添加新元素，具体有如下四个方法<ul>
<li><code>append()</code>- 在被选元素的结尾插入内容或元素</li>
<li><code>prepend()</code>-在被选元素的开头插入内容或元素；</li>
<li><code>after()</code>-在被选元素之后插入内容或元素；</li>
<li><code>before()</code>-在被选元素之前插入内容或元素；</li>
<li><code>append()</code>和<code>prepend()</code>方法能够通过参数接收无限数量的新元素。可以通过 jQuery 来生成文本/HTML，或者通过 JavaScript 代码和 DOM 元素。<blockquote>
<p>注意：append()在一个元素的尾部添加内容，不添加新节点，而after是在被选元素之后添加内容，添加了新节点。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>删除<ul>
<li>删除元素和添加元素类似，有以下几个方法<ul>
<li><code>remove()</code> -删除被选元素及其子元素，括号中可添加选择器，用于删除符合选择器条件的元素及其子元素；</li>
<li><code>empty()</code>-从被选元素中删除子元素；</li>
</ul>
</li>
</ul>
</li>
<li>css类<ul>
<li>利用jQuery可以很容易的操作css元素，主要方法有<ul>
<li><code>addClass()</code>-向被选元素添加一个或多个类（添加多个类的时候类名称之间用空格隔开）；</li>
<li><code>removeClass()</code>-从被选元素删除一个或多个类；</li>
<li><code>toggle()</code>-对被选元素添加/删除类的切换操作；</li>
</ul>
</li>
</ul>
</li>
<li>css()<ul>
<li>设置或返回被选元素的一个或多个样式属性，语法为<code>css(&#39;propertyName&#39;)</code>如果有多个满足被选条件，则只返回第一个元素的属性；</li>
<li>如需设置CSS属性，则需使用语法为<code>css(&#39;propertyName&#39;, &#39;value&#39;)</code>，此时将所有满足条件的元素的样式都设置成目标样式；</li>
</ul>
</li>
<li>尺寸<ul>
<li>通过jQuery很容易处理元素和浏览器窗口的尺寸，主要的方法如下：<ul>
<li><code>width()</code>-设置或返回元素的宽度（不包括内边距、边框和外边距），如果对象为document或者window，则表示返回HTML文档或者浏览器窗口的宽度和高度；如果在括号中加入数字，则表示将对应的尺寸设置为对应的值；</li>
<li><code>height()</code>-设置或返回元素的高度（不包括内边距、边框和外边距）；</li>
<li><code>innerWidth()</code>-返回元素的宽度（包括内边距）；</li>
<li><code>innerHeight()</code>-返回元素的高度（包括内边距）；</li>
<li><code>outerWidth()</code>-返回元素的宽度（包括内边距和边框），如果括号中增加参数‘true’则表示返回包括内外边距及边框的宽度；</li>
<li><code>outerHeight()</code>-返回元素的高度（包括内边距和边框），如果括号中增加参数‘true’则表示返回包括内外边距及边框的高度；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><em>示例</em></p>
<iframe height="265" scrolling="no" title="jQuery3" src="//codepen.io/longtean/embed/wdWgBE/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/wdWgBE/" target="_blank" rel="external">jQuery3</a> by LongTean (<a href="http://codepen.io/longtean" target="_blank" rel="external">@longtean</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h1 id="jQuery遍历"><a href="#jQuery遍历" class="headerlink" title="jQuery遍历"></a>jQuery遍历</h1><p><strong>关键词</strong>：<strong>遍历</strong>、<strong>祖先</strong>、<strong>后代</strong>、<strong>同胞</strong>、<strong>过滤</strong></p>
<ul>
<li>遍历<ul>
<li>遍历用于根据其相对于其他元素的关系来查找或者选取HTML元素；</li>
<li>DOM遍历：遍历方法中最大的种类是树遍历<code>tree-traversal</code></li>
</ul>
</li>
<li>祖先<ul>
<li>祖先元素包括父元素、祖父元素等等，常用的方法为：<ul>
<li><code>parent()</code>-返回被选元素的直接父元素；</li>
<li><code>parents()</code>-返回被选元素的所有祖先元素，其中甚至包括文档的根元素；</li>
<li><code>parentsUntil()</code>-返回介于两个给定元素之间的祖先元素；</li>
</ul>
</li>
</ul>
</li>
<li>后代<ul>
<li>与祖先相对的，后代指的是子、孙、曾孙等，常用的方法为：<ul>
<li><code>children()</code>-返回被选元素的直接子元素；</li>
<li><code>find()</code>-返回被选元素的被find的元素，包括所有后代；</li>
</ul>
</li>
</ul>
</li>
<li>同胞<ul>
<li>同胞拥有相同的父元素，常用的方法为：<ul>
<li><code>siblings()</code>：返回所有被选元素的同胞元素；</li>
<li><code>next()</code>：返回被选元素的下一个同胞元素；</li>
<li><code>nextAll()</code>：返回被选元素的所有跟随的同胞元素；</li>
<li><code>nextUntil()</code>：返回介于两个给定参数之间的所有跟随的同胞元素；</li>
<li><code>prev()</code>：返回被选元素的上一个同胞元素；</li>
<li><code>prevAll()</code>:返回被选元素的所有前面的同胞元素；</li>
<li><code>prevUntil()</code>：返回介于两个给定参数之间的所有的同胞元素；</li>
</ul>
</li>
</ul>
</li>
<li>过滤<ul>
<li>缩小搜索元素的范围，常用的方位有以下几种：<ul>
<li><code>first()</code>：返回被选元素的首个子元素；</li>
<li><code>last()</code>：返回被选元素的最后一个元素；</li>
<li><code>eq()</code>：返回被选元素中带有指定索引号的元素；</li>
<li><code>filter()</code>：返回符合匹配标准的元素集合；</li>
<li><code>not()</code>：返回不匹配标准的所有元素集合；<h1 id="jquery-Ajax"><a href="#jquery-Ajax" class="headerlink" title="jquery Ajax"></a>jquery Ajax</h1>&emsp;AJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。<br>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。这一章我准备写一篇专门的博客来介绍，附上教程<a href="http://www.w3cschool.cn/ajax/" target="_blank" rel="external">ajax教程</a>.</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;写了这么多，不仅是一种分享，希望更多地人看到，能对他们有所帮助，也是自己的一种总结，写在笔记本上的笔记会只属于自己，而写在这里的笔记，属于我们。<br>&emsp;共勉</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;暑假的时候虽然说学习过一遍jQuery了，但只是眼过一遍，熟悉了基本的使用并没有做记录，趁着学校这两天学校运动会放假，决定整理一篇jQuery的笔记，方便以后复习,以上均通过&lt;a href=&quot;http://www.w3cschool.cn/jquery/&quot;&gt;w3school&lt;/a&gt;学习。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;课程章结&quot;&gt;&lt;a href=&quot;#课程章结&quot; class=&quot;headerlink&quot; title=&quot;课程章结&quot;&gt;&lt;/a&gt;课程章结&lt;/h2&gt;&lt;h3 id=&quot;jQuery介绍&quot;&gt;&lt;a href=&quot;#jQuery介绍&quot; class=&quot;headerlink&quot; title=&quot;jQuery介绍&quot;&gt;&lt;/a&gt;jQuery介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：&lt;strong&gt;简介&lt;/strong&gt;、&lt;strong&gt;安装&lt;/strong&gt;、&lt;strong&gt;语法&lt;/strong&gt;、&lt;strong&gt;选择器&lt;/strong&gt;、&lt;strong&gt;事件&lt;/strong&gt;、&lt;strong&gt;名称冲突&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简介：jQuery是一个JavaScript函数库,它的宗旨是“write less，do more”,也就是一个轻量级的”写的少，做的多”的JavaScript库。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://longmimi.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://longmimi.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jquery" scheme="http://longmimi.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://longmimi.github.io/2017/03/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://longmimi.github.io/2017/03/25/第一篇博客/</id>
    <published>2017-03-25T15:43:14.000Z</published>
    <updated>2017-10-16T11:56:09.111Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;博客不像朋友圈，我感觉这是一个比较严肃的地方，我想在这里展示我的学习过程，我的想法，我的收获，分享给你们，我们共同成长。虽然一直有想写博客的想法，但是现在的年轻人，几乎都有懒癌这个病（我算中期吧。。。）建立博客的过程本来想写一篇教程的，但是网上教程那么多，而且我也比较懒，所以说以后写一些别的教程来分享吧。<br>   恩就酱 睡觉<br>   共勉<br>                                                                          3.25</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;博客不像朋友圈，我感觉这是一个比较严肃的地方，我想在这里展示我的学习过程，我的想法，我的收获，分享给你们，我们共同成长。虽然一直有想写博客的想法，但
    
    </summary>
    
      <category term="博客" scheme="http://longmimi.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://longmimi.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
