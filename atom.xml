<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LongTean&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://longmimi.github.io/"/>
  <updated>2021-11-17T06:07:46.491Z</updated>
  <id>http://longmimi.github.io/</id>
  
  <author>
    <name>LongTean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动手实现系列</title>
    <link href="http://longmimi.github.io/2021/09/04/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97/"/>
    <id>http://longmimi.github.io/2021/09/04/手写系列/</id>
    <published>2021-09-04T05:00:00.000Z</published>
    <updated>2021-11-17T06:07:46.491Z</updated>
    
    <content type="html"><![CDATA[<p>写一写，忘的慢。</p><a id="more"></a><p><a href="#防抖debounce">防抖 debounce</a><br><a href="#节流throttle">节流 throttle</a><br><a href="#instanceof">instanceof</a></p><h2 id="防抖debounce"><a href="#防抖debounce" class="headerlink" title="防抖debounce"></a>防抖debounce</h2><p>防抖是将多次执行变为一次执行</p><p>触发高频事件后N秒内只会执行一次，若n秒内再次触发，则重新计算时间,短期内多次触发,只执行最后一次</p><p>思路：每次触发事件时都取消之前的延时调用方法</p><p>应用：页面滚动事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">cb,delay,...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>; <span class="comment">//存储定时器返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(timeout)&#123;</span><br><span class="line">            clearTimeout(timeout);<span class="comment">//每次触发就清除前一个定时器</span></span><br><span class="line">        &#125;</span><br><span class="line">        timeout = setTimeou(<span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="comment">//创建一个新的定时器，保证在时间间隔内fn不会执行</span></span><br><span class="line">            cb.apply(<span class="keyword">this</span>,[e,...args]);</span><br><span class="line">            clearTimeout(timeout);</span><br><span class="line">            timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'防抖'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ele.addEEventListener(<span class="string">'input'</span>,debounce(success,<span class="number">500</span>));</span><br></pre></td></tr></table></figure><p>eg. 鼠标停止滚动500ms后执行回到函数fn</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = debounce(fn,<span class="number">500</span>,args1,args2);</span><br></pre></td></tr></table></figure><p>但是上面的实现存在一个问题，就是函数第一次触发需要等待一个时间间隔才会触发，针对这种情况 带有立即执行功能的防抖函数应运而生</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">now</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 防抖函数 返回函数连续调用时，必须时间间隔大于某一值，才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *@param &#123;function&#125; func            回调函数</span></span><br><span class="line"><span class="comment"> *@param &#123;number&#125;   wait            时间间隔</span></span><br><span class="line"><span class="comment"> *@param &#123;boolean&#125;  immedaite       是否立即调用函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,wait=<span class="number">50</span>,immdiate=true</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer,context,args;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//延时执行函数</span></span><br><span class="line">    <span class="keyword">const</span> later = <span class="function"><span class="params">()</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//延时函数执行完毕，清空缓存的定时器序号</span></span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        <span class="comment">//延时执行的情况下，函数会在延迟函数中执行</span></span><br><span class="line">        <span class="comment">//使用到之前缓存的参数和上下文</span></span><br><span class="line">        <span class="keyword">if</span>(!immdiate)&#123;</span><br><span class="line">            func.apply(context,args)</span><br><span class="line">            context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,wait)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//如果没有创建延迟执行函数later，创建一个</span></span><br><span class="line">        <span class="keyword">if</span>(!later)&#123;</span><br><span class="line">            timer = later();</span><br><span class="line">            <span class="comment">//如果是立即执行，调用函数</span></span><br><span class="line">            <span class="comment">//否则缓存参数和上下文</span></span><br><span class="line">            <span class="keyword">if</span>(immdiate)&#123;</span><br><span class="line">                func.apply(context,args);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                context = <span class="keyword">this</span>;</span><br><span class="line">                agrs = params;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果已经有延迟执行函数，调用时候清除原来的并重新设定一个</span></span><br><span class="line">            <span class="comment">//此时延迟执行函数会重新计时</span></span><br><span class="line">            claerTimeout(timer);</span><br><span class="line">            timer = later();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流throttle"><a href="#节流throttle" class="headerlink" title="节流throttle"></a>节流throttle</h2><p>节流是将多次执行变为间隔执行</p><p>高频事件触发，n秒内只会执行一次，节流相当于稀释函数的执行频率</p><p>思路：</p><ul><li>每次触发事件时都判断当前是否有等待执行的延时函数</li><li>利用时间戳判断执行间隔是否大于设置的时间间隔</li></ul><p>1.设置时间戳</p><p>当触发事件的时候，拿到当前时间戳-之前的时间戳（最初为0）,如果大于时间间隔，那么就执行函数，然后更新时间戳为当前时间戳，否则不执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,wait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context,args,previous=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(now-previous&gt;wait)&#123;</span><br><span class="line">            func.apply(context,args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.使用定时器</p><p>当触发事件的时候，设置一个定时器，再出发事件的时候，如果定时器存在，则不执行，一直到定时器执行结束，执行函数之后清空定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,wait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(!timeout)&#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.apply(context,args);</span><br><span class="line">            &#125;,wait)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof 用于检测构造函数的 prototype 属性是否存在与某个实例的原型链上<br>实现原理就是 左表达式的  <strong>proto</strong>  是不是强等于 右表达式的 prototype，不等于再找  左表达式.<strong>proto</strong> .<strong>proto</strong>  直到 <strong>proto</strong> 为 null  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_instanceof</span>(<span class="params">left,right</span>): <span class="title">boolean</span></span>&#123;</span><br><span class="line">    left = left.__proto__;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(left === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left === right.prototype) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left = left.__proto__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一写，忘的慢。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://longmimi.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://longmimi.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收</title>
    <link href="http://longmimi.github.io/2021/07/17/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://longmimi.github.io/2021/07/17/垃圾回收/</id>
    <published>2021-07-17T06:00:00.000Z</published>
    <updated>2021-08-12T00:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>垃圾回收机制（garbage collection）是指当js在创建变量时会自动分配内存，当这些变量不被引用时，将他们占用的内存释放掉，而没有及时将已经不需要的内存占用释放掉，就是内存泄漏。</p><a id="more"></a><p>js常见会内存泄露有以下场景：</p><ul><li>没有声明的变量赋值，被会绑定在全局对象上，即使不被使用也不会回收。</li><li>不清除定时器</li><li>闭包</li><li>事件监听未及时清除</li></ul><p>js中变量分为 基础类型 和 引用类型。 基础类型在内存中占据固定大小的空间，因此保存在栈内存中；引用类型保存在堆内存中，堆内存的引用指针保存在栈中。</p><p>js 垃圾回收有以下策略：</p><ul><li>标记清除</li><li>引用计数</li></ul><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>这是js最常用的回收策略。分为 <code>标记</code> 和 <code>清除</code> 两个阶段。</p><ul><li>当一个变量进入上下文中时会被加上标记</li><li>将所有在上下文中的变量以及上下文被访问引用的变量标记清除掉，表示这些变量是活跃的。</li><li>之后被加上标记的变量代表是准备删除的变量</li><li>执行内存清理，销毁这些变量回收内存</li></ul><p>但是标记清除也有局限性：</p><ul><li>由于从全局对象开始查找，那些无法从根对象查询到的变量都会被清除</li><li>会造成空间碎片化(将被清除的不可达对象释放到空闲链表的时候，由于中间有可达对象，因此空间不连续)，无法空间最大化使用，可以使用标记整理或者标记压缩算法进行内存整理</li><li>分配速度慢，由于空间碎片，需要对空闲链表遍历</li></ul><h3 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h3><p>标记整理可以看做对标记清除的增强，标记阶段一致，在清除阶段会先整理内存，移动对象位置，再清除，减少碎片化空间，但是缺点也是由于进行位置移动，回收效率慢。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>对每个值记录引用的次数，当引用次数为0时，代表访问这个值，就会等待垃圾回收器回收。这种方式存在循环引用的问题无法清除的问题，所谓循环引用举个栗子就是对象A中包含一个指向对象B的指针，而对象B中也包含一个指向A的指针，那么就无法清除，造成内存泄露。</p><h3 id="V8中的分代回收"><a href="#V8中的分代回收" class="headerlink" title="V8中的分代回收"></a>V8中的分代回收</h3><p>v8引擎中垃圾回收机制基于<code>分代回收机制</code>，其将堆内存分为新生代、老生代、大对象空间、代码空间等等；新生代存储存活时间较短的对象，老生代是存活时间较长或者常驻内存的对象。</p><ul><li><p>新生代占据堆较小的空间，垃圾回收频率较高，采用 复制算法+ 标记整理 回收， 基本就是 空间换时间</p><ul><li>新生代内存分配两个等大小空间，使用空间From 空闲空间 To</li><li>活动（可达）对象存于From 中</li><li>当From空间使用到一定程度时触发回收操作：<ul><li>整理可达对象和不可达对象，将所有不可达对象整理成连续空间，将可达对象复制到To，同时检查可达对象是否符合晋升条件，符合进入老生代空间</li><li>若无可达对象，直接清除</li></ul></li><li><p>From 和 To交换，完成释放</p><p>晋升</p><p>晋升发生在从From 到 To的复制过程中</p><p>晋升条件</p></li><li><p>一轮清理后还存活的新生代对象晋升</p></li><li>To空间使用超过25%，则全部晋升</li></ul></li><li><p>老生代大多为新生代存活一段时间转移至此，主要采用标记清除、标记整理、增量标记等。由于空间较大，空间换时间会造成空间浪费。</p><ul><li>正常使用标记清除完成回收</li><li>老生代空间不足时 触发标记整理</li><li><p>增量标记进行效率优化</p><p>  由于在垃圾回收时会停止应用逻辑，这种行为称为 全停顿 。因此将一段垃圾回收标记操作拆分成多个子标记操作，同时让垃圾回收标记和js应用逻辑交替进行，提高效率。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;垃圾回收机制（garbage collection）是指当js在创建变量时会自动分配内存，当这些变量不被引用时，将他们占用的内存释放掉，而没有及时将已经不需要的内存占用释放掉，就是内存泄漏。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://longmimi.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://longmimi.github.io/tags/javascript/"/>
    
      <category term="垃圾回收" scheme="http://longmimi.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>typescript学习</title>
    <link href="http://longmimi.github.io/2019/12/01/typescript%E5%AD%A6%E4%B9%A0/"/>
    <id>http://longmimi.github.io/2019/12/01/typescript学习/</id>
    <published>2019-12-01T14:10:59.000Z</published>
    <updated>2021-08-12T00:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <img src="https://s2.ax1x.com/2019/11/03/KXWzuQ.png" alt="KXWzuQ.png" border="0" /> --><blockquote><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>是javascript的超集，为js添加了可选择的类型标注，增强了代码的可读性和可维护性。以下是通过官方文档和网上的学习资源，总结的ts学习笔记,加深记忆。<br><a id="more"></a></p></blockquote><p><a href="#基础类型">基础类型</a><br><a href="#接口">接口</a><br><a href="#泛型">泛型</a><br><a href="#类">类</a><br><a href="#类型推论">类型推论</a><br><a href="#函数">函数</a><br><a href="#枚举">枚举</a><br><a href="#高级类型">高级类型</a></p><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install -g typescript</code></p><p>打开编辑器，新建demo.ts文件，输入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tsFunc</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hi'</span> + person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"longtean"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure></p><p>接着打开命令行，输入 <code>tsc demo.ts</code>, 就可以将ts文件编译成js文件。</p><h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><p>ts里的类型注解是一种轻量级的为函数或变量添加约束的方式。如果希望函数接受某种类型的参数，可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tsFunc</span>(<span class="params">person: string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hi'</span> + person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当你给这个函数传入了其他类型的参数并进行编译，就会报错提示传入的参数类型不符。同样，如果没有传递参数给函数，编译也会报错，提示传入非期望个数的参数。这是因为ts提供了静态的代码分析，可以分析代码结构和提供的类型注解。</p><h2 id="基础类型-1"><a href="#基础类型-1" class="headerlink" title="基础类型"></a>基础类型</h2><p>ts支持与js几乎相同的数据类型，此外提供了 <code>枚举类型</code></p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone : boolean = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _number :number = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _string :string = <span class="string">'longtean'</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>有两种方式可以定义数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _arraylist :number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//或者使用数组泛型</span></span><br><span class="line"><span class="keyword">let</span> list :<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h3 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h3><p>元组类型表示一个已知元素数量和类型的数组，各元素的类型不必相同。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [string, number]</span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK </span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></p><h3 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举 enum"></a>枚举 enum</h3><p>enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"><span class="comment">//枚举类型的便利是可以由枚举的值得到名字。</span></span><br><span class="line">enum Color &#123; red=<span class="number">1</span>,green,blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName : string  = Color[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colorName) <span class="comment">//green</span></span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value : any = <span class="number">4</span>;</span><br><span class="line">value ==<span class="string">'aaaaa'</span>;</span><br><span class="line">value = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>某种意义上说void和any相反 表示没有任何类型。<br>只能被赋值  undefined 和 null</p><h3 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null undefined"></a>null undefined</h3><p>是所有类型的子类型</p><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error(<span class="string">"Something failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>非原始类型，除 <code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code> 之外的类型</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>等于是告诉编译器，可以跳过类型判断 ，表明开发者了解当前类型</p><p>有两种形似。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尖括号 语法</span></span><br><span class="line"><span class="keyword">let</span> someValue : any = <span class="string">'tetsas'</span></span><br><span class="line"><span class="keyword">let</span> strLength : number = (<span class="xml"><span class="tag">&lt;<span class="name">string</span>&gt;</span>someValue).length</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// as 语法</span></span><br><span class="line"><span class="keyword">let</span> someValue : any = <span class="string">'sdjijfa'</span></span><br><span class="line"><span class="keyword">let</span> strLength : number = (someValue <span class="keyword">as</span> string).length</span><br></pre></td></tr></table></figure><p>注 ： 在ts中使用jsx  只有as语法被允许</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h2><p>我理解的接口就是类型注解的集合，用接口来描述一个对象的属性。在ts里，只要两个类型内部的接口可以兼容，那这两个类型就可以兼容。这就允许我们在实现接口的时候包含接口需要的结构就可以，不必实现所有的结构。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    firstName: string;</span><br><span class="line">    lastName: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">firstName</span>: <span class="string">"Jane"</span>, <span class="attr">lastName</span>: <span class="string">"User"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure></p><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>接口里的属性不都是必须的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface SquareConfig &#123;</span><br><span class="line">    color?: string;</span><br><span class="line">    width?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config:SquareConfig</span>) :</span>&#123;color:string;area:number&#125;&#123;</span><br><span class="line">    <span class="keyword">let</span> newSquare = &#123; <span class="attr">color</span>: <span class="string">'white'</span>,<span class="attr">area</span>:<span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(config.color)&#123;</span><br><span class="line">        newSquare.color = config.color</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;<span class="attr">color</span>:<span class="string">'blue'</span>&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>一些对象属性只能在对象刚刚创建时修改值， readonly 指定<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋值之后，就不能被修改</span></span><br><span class="line">interface Point&#123;</span><br><span class="line">    readonly x:number;</span><br><span class="line">    readonly y:numbet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1:Point = &#123;<span class="attr">x</span>:<span class="number">10</span>,<span class="attr">y</span>:<span class="number">11</span>&#125;;</span><br><span class="line">p1.x = <span class="number">5</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><p>TypeScript具有ReadonlyArray<t>类型，它与Array<t>相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;number&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br><span class="line"><span class="comment">// ReadonlyArray赋值给普通数组也不行，可以使用类型断言重写</span></span><br><span class="line">a = ro <span class="keyword">as</span> number[]</span><br></pre></td></tr></table></figure></t></t></p><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>接口描述函数类型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface searchFunc&#123;</span><br><span class="line">    (source:string,<span class="attr">subString</span>:string) :boolean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="可索引类型"><a href="#可索引类型" class="headerlink" title="可索引类型"></a>可索引类型</h3><p>具有一个索引签名，描述对象索引的类型，和相应索引返回值类型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface StringArray&#123;</span><br><span class="line">    [index:number]:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"><span class="keyword">let</span> myStr: string = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><p>::: tip<br>索引签名可以使用 字符串和数字，但数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象<br>:::</p><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><p>在接口中描述一个方法，在类里实现它.</p><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><p>接口和类一样 可以继承，从一个接口里复制成员到另一个接口里。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">    color: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface PenStroke &#123;</span><br><span class="line">    penWidth: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Square extends Shape, PenStroke &#123;</span><br><span class="line">    sideLength: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="xml"><span class="tag">&lt;<span class="name">Square</span>&gt;</span>&#123;&#125;;</span></span><br><span class="line"><span class="xml">square.color = "blue";</span></span><br><span class="line"><span class="xml">square.sideLength = 10;</span></span><br><span class="line"><span class="xml">square.penWidth = 5.0;</span></span><br></pre></td></tr></table></figure></p><h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><p>一个对象可以同时做为函数和对象使用，并带有额外的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Counter &#123;</span><br><span class="line">    (start: number): string;</span><br><span class="line">    interval: number;</span><br><span class="line">    reset(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="xml"><span class="tag">&lt;<span class="name">Counter</span>&gt;</span>function (start: number) &#123; &#125;;</span></span><br><span class="line"><span class="xml">    counter.interval = 123;</span></span><br><span class="line"><span class="xml">    counter.reset = function () &#123; &#125;;</span></span><br><span class="line"><span class="xml">    return counter;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">let c = getCounter();</span></span><br><span class="line"><span class="xml">c(10);</span></span><br><span class="line"><span class="xml">c.reset();</span></span><br><span class="line"><span class="xml">c.interval = 5.0;</span></span><br></pre></td></tr></table></figure></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>先写一个普通的函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>any类型并不能保证传入的参数和返回类型是统一类型，这时候需要使用类型变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity : <span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span>(arg:T) =&gt; T = identity</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//使用不同泛型参数名</span></span><br><span class="line">let myIdentity : &lt;U&gt;(arg:U) =&gt; U = identity</span><br><span class="line"></span><br><span class="line">//使用带有调用签名的对象字面量来定义泛型函数</span><br><span class="line">let myIdentity: &#123;&lt;T&gt;(arg: T): T&#125; = identity;</span><br></pre></td></tr></table></figure></p><p>上面的这个函数，就叫做泛型，可以接受任意类型参数，但又可以约束参数和返回值类型。</p><p>有两种方法可以使用泛型函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入所有的参数，明确指定T的类型</span></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;string&gt;(<span class="string">"myString"</span>);</span><br><span class="line"><span class="comment">//使用类型推论，编译器会根据传入的参数推论T的类型</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">"myString"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface genericIdentityFn &#123;</span><br><span class="line">    &lt;T&gt;(arg:T) : T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>) : <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity : genericIdentityFn = identity</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    value : T,</span><br><span class="line">    func : <span class="function">(<span class="params"> x:T, y:T</span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;number&gt;();</span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>定义一个接口来约束泛型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Lengthwise &#123;</span><br><span class="line">    length: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>); <span class="comment">// error 数字没有.length</span></span><br><span class="line">loggingIdentity(&#123;<span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类-class"><a href="#类-class" class="headerlink" title="类 class"></a>类 class</h2><p>ts支持基于类的面向对象编程，类和接口可以一起工作。<br>新建一个带有构造函数和属性的 Student 类。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    fullName: string;</span><br><span class="line">    <span class="keyword">constructor</span>(public firstName, public middleInitial, public lastName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + middleInitial + <span class="string">" "</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Person &#123;</span><br><span class="line">    firstName: string;</span><br><span class="line">    lastName: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person : Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> Student(<span class="string">"Jane"</span>, <span class="string">"M."</span>, <span class="string">"User"</span>);</span><br></pre></td></tr></table></figure></p><p>::: tip<br>注：在构造函数的参数上使用public等同于创建了同名的成员变量。<br>:::</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>public 默认</li><li>private 私有 类外不可访问</li><li>protected 在子类中仍可访问</li><li>readonly 必须在声明时或构造函数里被初始化</li></ul><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>ts可以通过getters/setters来截取对对象成员的访问，这是一个把类改写成get和set的例子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    private _fullName: string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> fullName(): string &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> fullName(newName: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用。使用abstract 关键字定义抽象类和抽象方法。<br>不能创建一个抽象类的实例，但是允许创建一个对抽象类型的引用，也允许对一个抽象子类进行实例化和赋值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(public name: string) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    abstract printMeeting(): <span class="keyword">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'Accounting and Auditing'</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">    &#125;</span><br><span class="line">    printMeeting(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'The Accounting Department meets each Monday at 10am.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> department: Department; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line">department = <span class="keyword">new</span> Department(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.printMeeting();</span><br><span class="line">department.generateReports(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure></p><p>定义一个类，会创建一个类的实例和构造函数</p><h3 id="把类当接口使用"><a href="#把类当接口使用" class="headerlink" title="把类当接口使用"></a>把类当接口使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    x: number;</span><br><span class="line">    y: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Point3d extends Point &#123;</span><br><span class="line">    z: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h1 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h1><h2 id="类型推论-interence"><a href="#类型推论-interence" class="headerlink" title="类型推论 interence"></a>类型推论 interence</h2><p>类型是在哪里如何被推断的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> X = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>变量X会被推断为 数字类型。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">null</span>];</span><br></pre></td></tr></table></figure></p><p>候选的类型有 数字和 null。</p><p>当候选类型不能推断出类型的时候，需要声明类型。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> zoo: Animal[] = [<span class="keyword">new</span> Rhino(), <span class="keyword">new</span> Elephant(), <span class="keyword">new</span> Snake()];</span><br></pre></td></tr></table></figure></p><p>ts也可以按照上下文环境进行类型推论：上下文归类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">mouseEvent: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mouseEvent.button);  <span class="comment">//&lt;- Now, no error is given</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>根据window.onmousedown的函数类型推论出右边函数表达式的类型。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数-Function"><a href="#函数-Function" class="headerlink" title="函数 Function"></a>函数 Function</h2><p>有两种方式可以创建函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">x:number,y:number</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">let</span> myName = <span class="function"><span class="keyword">function</span>(<span class="params">x:number,y:number</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数必须指定返回值类型，包括void</p><p>typescript里每个参数都是必须的，而js里每个参数都是可选的，不传就是undefined.在ts里可以在参数旁使用 ？实现可选参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选参数必须在必选参数的后面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">name:string,type?:string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + type</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 重载</span></span><br><span class="line"><span class="string">函数根据传入不通的参数，返回不同类型的数据。ts查找重载列表和js相似，我们应该把最精确的定义放在参数第一个。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 枚举</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 枚举 enumerate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ts支持数字和基于字符串的枚举。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">//后面的值被从1递增</span></span><br><span class="line">enum Direction &#123;</span><br><span class="line">    Up = <span class="number">1</span>,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum Direction &#123;</span><br><span class="line">    Up = <span class="string">"UP"</span>,</span><br><span class="line">    Down = <span class="string">"DOWN"</span>,</span><br><span class="line">    Left = <span class="string">"LEFT"</span>,</span><br><span class="line">    Right = <span class="string">"RIGHT"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>枚举成员的值可以是常量 或者 计算 出来。</p><ul><li><p>枚举的第一个成员且没有初始化器，这种情况下它被赋予值 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum E &#123; X &#125; <span class="comment">//X</span></span><br></pre></td></tr></table></figure></li><li><p>它不带有初始化器且它之前的枚举成员是一个 数字常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum E &#123;  A = <span class="number">1</span>, B, C &#125;</span><br></pre></td></tr></table></figure></li></ul><p>除了创建一个以属性名做为对象成员的对象之外，数字枚举成员还具有了 反向映射，从枚举值到枚举名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Enum &#123;</span><br><span class="line">    A</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = Enum.A;</span><br><span class="line"><span class="keyword">let</span> nameOfA = Enum[a]; <span class="comment">// "A"</span></span><br></pre></td></tr></table></figure><p>const 枚举 避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enum Enum &#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = A * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h1><h2 id="高级类型-advanced"><a href="#高级类型-advanced" class="headerlink" title="高级类型 advanced"></a>高级类型 advanced</h2><h2 id="高级类型-1"><a href="#高级类型-1" class="headerlink" title="高级类型"></a>高级类型</h2><h3 id="交叉类型-amp"><a href="#交叉类型-amp" class="headerlink" title="交叉类型 &amp;"></a>交叉类型 &amp;</h3><p>是将多个类型合并为一个类型，就包含了所需要的所有类型特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(public name: string) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Loggable &#123;</span><br><span class="line">    log(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsoleLogger</span> <span class="title">implements</span> <span class="title">Loggable</span> </span>&#123;</span><br><span class="line">    log() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">new</span> Person(<span class="string">'fk'</span>) &amp; <span class="keyword">new</span> ConsoleLogger(<span class="string">'fu'</span>)</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型 |"></a>联合类型 |</h3><p>只能访问所有类型的共有成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Bird &#123;</span><br><span class="line">    fly();</span><br><span class="line">    layEggs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Fish &#123;</span><br><span class="line">    swim();</span><br><span class="line">    layEggs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSmallPet</span>(<span class="params"></span>): <span class="title">Fish</span> | <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line">pet.layEggs(); <span class="comment">// okay</span></span><br><span class="line">pet.swim();    <span class="comment">// errors</span></span><br></pre></td></tr></table></figure><h3 id="类型保护机制"><a href="#类型保护机制" class="headerlink" title="类型保护机制"></a>类型保护机制</h3><p>联合类型只能获取共有的成员，访问其他成员就会报错。当然我们可以添加类型断言来防止报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一个成员访问都会报错</span></span><br><span class="line"><span class="keyword">if</span> (pet.swim) &#123;</span><br><span class="line">    pet.swim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pet.fly) &#123;</span><br><span class="line">    pet.fly();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了让这段代码工作，我们要使用类型断言：</span></span><br><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="xml"><span class="tag">&lt;<span class="name">Fish</span>&gt;</span>pet).swim) &#123;</span></span><br><span class="line">    (&lt;Fish&gt;pet).swim();</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    (&lt;Bird&gt;pet).fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过类型保护来解决上面使用类型断言的问题。</p><p>要定义一个类型保护，只需定义一个函数，返回一个 类型谓词。<br>格式： paramsName is type</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFish</span>(<span class="params">pet: Fish | Bird</span>): <span class="title">pet</span> <span class="title">is</span> <span class="title">Fish</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">Fish</span>&gt;</span>pet).swim !== undefined;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line">if ((&lt;Fish&gt;pet).swim) &#123;</span><br><span class="line">    (&lt;Fish&gt;pet).swim();</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    (&lt;Bird&gt;pet).fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这段代码就变成了</span><br><span class="line"></span><br><span class="line">if (isFish(pet)) &#123;</span><br><span class="line">    pet.swim(); //pet 是 Fish 类型</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    pet.fly(); // pet 不是Fish类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="typeof-类型保护"><a href="#typeof-类型保护" class="headerlink" title="typeof 类型保护"></a>typeof 类型保护</h4><p> 有两种格式可以被识别被当做类型保护。</p><ul><li>typeof v === ‘typename’</li><li><p>typeof v !== ‘typename’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">x: any</span>): <span class="title">x</span> <span class="title">is</span> <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"number"</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> x === <span class="string">'number'</span></span><br></pre></td></tr></table></figure><h4 id="instanceof-类型保护"><a href="#instanceof-类型保护" class="headerlink" title="instanceof 类型保护"></a>instanceof 类型保护</h4></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  foo = <span class="number">123</span>;</span><br><span class="line">  common = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  bar = <span class="number">123</span>;</span><br><span class="line">  common = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo | Bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Foo) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// ok</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// Error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Bar) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// Error</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doStuff(<span class="keyword">new</span> Foo());</span><br><span class="line">doStuff(<span class="keyword">new</span> Bar());</span><br></pre></td></tr></table></figure><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><p>in 操作符可以安全的检查一个对象上是否存在一个属性，通常也被当做类型保护使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">  x: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface B &#123;</span><br><span class="line">  y: string </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funciton stuff(q: A | B)&#123;</span><br><span class="line">  <span class="keyword">if</span>( <span class="string">'x'</span> <span class="keyword">in</span> A)&#123;</span><br><span class="line">    <span class="comment">//q:A</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//q:B</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可选参数和属性"><a href="#可选参数和属性" class="headerlink" title="可选参数和属性"></a>可选参数和属性</h4><p>使用了 –strictNullChecks，可选参数会被自动地加上 | undefined:</p><p><code>identifier!</code>从 identifier的类型里去除了 <code>null</code>和 <code>undefined</code></p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名会给一个类型起个新名字。 类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type Name = string;</span><br><span class="line">type NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> string;</span><br><span class="line">type NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型的类型别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Container&lt;T&gt; = &#123; <span class="attr">value</span>: T &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型别名不能出现在 声明右侧的任何地方</span></span><br><span class="line">type Yikes = <span class="built_in">Array</span>&lt;Yikes&gt;; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="接口和类型别名"><a href="#接口和类型别名" class="headerlink" title="接口和类型别名"></a>接口和类型别名</h3><p>接口创建了一个新的名字，可以在其他地方任意使用。<br>类型别名只是对现有类型的引用，不创建新的名字。<br>类型别名不能被 extends和 implements，因为你不能去修改一个现有的类型吧。</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>使用索引类型，编辑器就可以检查使用了动态属性名的代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">funciton pluck&lt;T,K extends keyof T&gt;(o:T,<span class="attr">names</span>:K[]):T[K]&#123;</span><br><span class="line">  <span class="keyword">return</span> names.map(<span class="function"><span class="params">n</span>=&gt;</span>o[n])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person :Person = &#123;</span><br><span class="line">  name : <span class="string">'long'</span>,</span><br><span class="line">  age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> strings: string[] = pluck(person,[<span class="string">'name'</span>]) <span class="comment">//ok,string[]</span></span><br></pre></td></tr></table></figure></p><ul><li><p>keyof T 是 索引类型查询操作符。 表示T上已知的公共属性名称的联合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> personProps: keyof Person <span class="comment">// 'name' | 'age'</span></span><br></pre></td></tr></table></figure></li><li><p>T[K] 索引访问操作符</p></li></ul><p>通过索引访问到实例</p><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><p>从旧类型中创建新类型的一种方式：新类型以相同的形式去转换旧类型里每个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type Readonly&lt;T&gt; = &#123;</span><br><span class="line">    readonly [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;</span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">type PersonPartial = Partial&lt;Person&gt;;</span><br><span class="line">type ReadonlyPerson = Readonly&lt;Person&gt;;</span><br><span class="line"></span><br><span class="line">type Keys = <span class="string">'option1'</span> | <span class="string">'option2'</span>;</span><br><span class="line">type Flags = &#123; [K <span class="keyword">in</span> Keys]: boolean &#125;;</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line">type Flags = &#123;</span><br><span class="line">    option1: boolean;</span><br><span class="line">    option2: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;img src=&quot;https://s2.ax1x.com/2019/11/03/KXWzuQ.png&quot; alt=&quot;KXWzuQ.png&quot; border=&quot;0&quot; /&gt; --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript&lt;/a&gt;是javascript的超集，为js添加了可选择的类型标注，增强了代码的可读性和可维护性。以下是通过官方文档和网上的学习资源，总结的ts学习笔记,加深记忆。&lt;br&gt;
    
    </summary>
    
      <category term="typescript" scheme="http://longmimi.github.io/categories/typescript/"/>
    
    
      <category term="typescript" scheme="http://longmimi.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置及优化</title>
    <link href="http://longmimi.github.io/2019/07/23/webpack%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>http://longmimi.github.io/2019/07/23/webpack配置及优化/</id>
    <published>2019-07-23T14:52:06.000Z</published>
    <updated>2021-08-12T00:16:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>本地安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webapck webpack-cli --save-dev</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="0-配置使用"><a href="#0-配置使用" class="headerlink" title="0 配置使用"></a>0 配置使用</h2><p>即默认配置，功能十分单一，会将<code>src</code>目录下的<code>index.js</code>文件打包到<code>dist</code>目录下，并命名为<code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js 文件内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'longtean'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js 文件内容</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="built_in">require</span>(<span class="string">'./test.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js打包后输出内容</span></span><br><span class="line"></span><br><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = &#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[r]) <span class="keyword">return</span> t[r].exports;</span><br><span class="line">    <span class="keyword">var</span> o = (t[r] = &#123; <span class="attr">i</span>: r, <span class="attr">l</span>: !<span class="number">1</span>, <span class="attr">exports</span>: &#123;&#125; &#125;);</span><br><span class="line">    <span class="keyword">return</span> e[r].call(o.exports, o, o.exports, n), (o.l = !<span class="number">0</span>), o.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  (n.m = e),</span><br><span class="line">    (n.c = t),</span><br><span class="line">    (n.d = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, r</span>) </span>&#123;</span><br><span class="line">      n.o(e, t) || <span class="built_in">Object</span>.defineProperty(e, t, &#123; <span class="attr">enumerable</span>: !<span class="number">0</span>, <span class="attr">get</span>: r &#125;);</span><br><span class="line">    &#125;),</span><br><span class="line">    (n.r = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="string">"undefined"</span> != <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp;</span><br><span class="line">        <span class="built_in">Symbol</span>.toStringTag &amp;&amp;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(e, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">"Module"</span> &#125;),</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(e, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: !<span class="number">0</span> &#125;);</span><br><span class="line">    &#125;),</span><br><span class="line">    (n.t = <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="number">1</span> &amp; t &amp;&amp; (e = n(e)), <span class="number">8</span> &amp; t)) <span class="keyword">return</span> e;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">4</span> &amp; t &amp;&amp; <span class="string">"object"</span> == <span class="keyword">typeof</span> e &amp;&amp; e &amp;&amp; e.__esModule) <span class="keyword">return</span> e;</span><br><span class="line">      <span class="keyword">var</span> r = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (n.r(r),</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(r, <span class="string">"default"</span>, &#123; <span class="attr">enumerable</span>: !<span class="number">0</span>, <span class="attr">value</span>: e &#125;),</span><br><span class="line">        <span class="number">2</span> &amp; t &amp;&amp; <span class="string">"string"</span> != <span class="keyword">typeof</span> e)</span><br><span class="line">      )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> o <span class="keyword">in</span> e)</span><br><span class="line">          n.d(</span><br><span class="line">            r,</span><br><span class="line">            o,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> e[t];</span><br><span class="line">            &#125;.bind(<span class="literal">null</span>, o)</span><br><span class="line">          );</span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">    &#125;),</span><br><span class="line">    (n.n = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t =</span><br><span class="line">        e &amp;&amp; e.__esModule</span><br><span class="line">          ? <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> e.default;</span><br><span class="line">            &#125;</span><br><span class="line">          : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> e;</span><br><span class="line">            &#125;;</span><br><span class="line">      <span class="keyword">return</span> n.d(t, <span class="string">"a"</span>, t), t;</span><br><span class="line">    &#125;),</span><br><span class="line">    (n.o = <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(e, t);</span><br><span class="line">    &#125;),</span><br><span class="line">    (n.p = <span class="string">""</span>),</span><br><span class="line">    n((n.s = <span class="number">0</span>));</span><br><span class="line">&#125;)([</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> r = n(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(r);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">    e.exports = <span class="string">"longtean"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>可以看到，由于使用了commonJS的模块化语法，而这个模块化语法无法运行在浏览器端，webpack在打包输出的文件里帮我们进行了处理，使得代码可以运行在浏览器端。</p><h2 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h2><p>根目录新建配置文件 <code>webpack.config.js</code></p><p>默认的配置文件名写法有两种，第二种是<code>webpackfile.js</code>,在运行webpack命令后，会执行node_modules下的<code>webpack-cli/bin/config-yargs.js</code>,defaultDescription属性中规定了默认配置文件名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode:<span class="string">'development'</span>, <span class="comment">//模式    默认 production 和 development</span></span><br><span class="line">  entry:<span class="string">'./src/index.js'</span>, <span class="comment">//入口文件</span></span><br><span class="line">  output:&#123;</span><br><span class="line">     filename:<span class="string">'bundle.[hash:8].js'</span>, <span class="comment">//打包后的文件名</span></span><br><span class="line">    path: path.resolve(__dirname,<span class="string">'dist'</span>), <span class="comment">//路径必须是绝对路径 resolve()方法可以将相对路径解析为绝对路径</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>development模式打包出的bundle.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"> <span class="comment">// 模块缓存</span></span><br><span class="line"> <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 实现 require 方法  __webpack_require__</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Check if module is in cache</span></span><br><span class="line"> <span class="keyword">if</span>(installedModules[moduleId]) &#123;</span><br><span class="line"> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"> i: moduleId,</span><br><span class="line"> l: <span class="literal">false</span>,</span><br><span class="line"> exports: &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Execute the module function</span></span><br><span class="line"> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Flag the module as loaded</span></span><br><span class="line"> <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Return the exports of the module</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"> __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// expose the module cache</span></span><br><span class="line"> __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// define getter function for harmony exports</span></span><br><span class="line"> __webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params">exports, name, getter</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(exports, name, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: getter &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// define __esModule on exports</span></span><br><span class="line"> __webpack_require__.r = <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">'Module'</span> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(exports, <span class="string">'__esModule'</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// create a fake namespace object</span></span><br><span class="line"> <span class="comment">// mode &amp; 1: value is a module id, require it</span></span><br><span class="line"> <span class="comment">// mode &amp; 2: merge all properties of value into the ns</span></span><br><span class="line"> <span class="comment">// mode &amp; 4: return value when already ns object</span></span><br><span class="line"> <span class="comment">// mode &amp; 8|1: behave like require</span></span><br><span class="line"> __webpack_require__.t = <span class="function"><span class="keyword">function</span>(<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line"> <span class="keyword">if</span>(mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line"> <span class="keyword">if</span>((mode &amp; <span class="number">4</span>) &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line"> <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"> __webpack_require__.r(ns);</span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(ns, <span class="string">'default'</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: value &#125;);</span><br><span class="line"> <span class="keyword">if</span>(mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">'string'</span>) <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> value) __webpack_require__.d(ns, key, <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; <span class="keyword">return</span> value[key]; &#125;.bind(<span class="literal">null</span>, key));</span><br><span class="line"> <span class="keyword">return</span> ns;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line"> __webpack_require__.n = <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ?</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">'default'</span>]; &#125; :</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>; &#125;;</span><br><span class="line"> __webpack_require__.d(getter, <span class="string">'a'</span>, getter);</span><br><span class="line"> <span class="keyword">return</span> getter;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line"> __webpack_require__.o = <span class="function"><span class="keyword">function</span>(<span class="params">object, property</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// __webpack_public_path__</span></span><br><span class="line"> __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 加载入口模块 返回导出的对象</span></span><br><span class="line"> <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/index.js"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"> (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">"./src/index.js"</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/*! no static exports found */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"const str = __webpack_require__(/*! ./test.js */ \"./src/test.js\")\nconsole.log(str)\n\n//# sourceURL=webpack:///./src/index.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">"./src/test.js"</span>:</span><br><span class="line"><span class="comment">/*!*********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/test.js ***!</span></span><br><span class="line"><span class="comment">  \*********************/</span></span><br><span class="line"><span class="comment">/*! no static exports found */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"module.exports = 'longtean test'\n\n//# sourceURL=webpack:///./src/test.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><strong>也可以指定配置文件名称</strong></p><p>运行 webpack –config webpack.config.<code>selfname</code>.js  就可以以指定配置文件进行打包</p><p>或者package.json 文件中添加script脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span>  <span class="comment">//在这里进行配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><p>安装本地开发服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><p>添加执行脚本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置本地服务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.cpnfig.js</span></span><br><span class="line"></span><br><span class="line"> devServer:&#123; <span class="comment">//开发服务器配置</span></span><br><span class="line">    port:<span class="number">3001</span>,</span><br><span class="line">    progress:<span class="literal">true</span>, <span class="comment">//是否显示进度条</span></span><br><span class="line">    contentBase: <span class="string">'./dist'</span>, <span class="comment">//以指定目录运行静态服务</span></span><br><span class="line">    open:<span class="literal">true</span>, <span class="comment">//自动打开浏览器</span></span><br><span class="line">    compress:<span class="literal">true</span>  <span class="comment">//压缩</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>npm run dev 即可自动打开浏览器并访问3001端口</p><h2 id="Html处理"><a href="#Html处理" class="headerlink" title="Html处理"></a>Html处理</h2><p>src目录下创建index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要安装 <code>html-webpack-plugin</code>插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>在配置文件中引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  plugins:[ <span class="comment">//数组，放置左右webpack插件</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template:<span class="string">'./src/index.html'</span>, <span class="comment">//模板文件路径</span></span><br><span class="line">      filename:<span class="string">'index.html'</span>,  <span class="comment">//输出文件名</span></span><br><span class="line">      minify:&#123;</span><br><span class="line">        removeAttributeQuotes:<span class="literal">true</span>, <span class="comment">//删除双引号</span></span><br><span class="line">        collapseWhitespace:<span class="literal">true</span> <span class="comment">//折叠空行</span></span><br><span class="line">      &#125;,</span><br><span class="line">      hash:<span class="literal">true</span> <span class="comment">//加hash</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="css处理"><a href="#css处理" class="headerlink" title="css处理"></a>css处理</h2><p>src下创建index.css index.scss文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js中引入样式文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./index.css'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index.scss'</span>)</span><br></pre></td></tr></table></figure></p><p>webpack并不能识别css代码，这时候需要安装loader来解析</p><p>安装 <code>css-loader</code> <code>style-loader</code> <code>sass-loader</code> <code>node-sass</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader sass-loader node-sass -D</span><br></pre></td></tr></table></figure></p><p>在配置文件中添加module配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>:&#123;<span class="comment">//模块</span></span><br><span class="line">    rules:[ </span><br><span class="line">      <span class="comment">//规则 css-loader 解析 @import </span></span><br><span class="line">      <span class="comment">//style-loader css插入head标签</span></span><br><span class="line">      <span class="comment">//使用单个时loader名为字符串，多个loader时数组，需要配置参数options时对象</span></span><br><span class="line">      <span class="comment">//loader执行顺序为自右向左 自下而上</span></span><br><span class="line">     &#123;</span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          &#123;</span><br><span class="line">            loader:<span class="string">'style-loader'</span>,</span><br><span class="line">            options:&#123;</span><br><span class="line">              insertAt:<span class="string">'top'</span>  <span class="comment">//style标签插入到顶部</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          &#123;</span><br><span class="line">            loader:<span class="string">'style-loader'</span>,</span><br><span class="line">            options:&#123;</span><br><span class="line">              insertAt:<span class="string">'top'</span>  <span class="comment">//style标签插入到顶部</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'sass-loader'</span> <span class="comment">// sass-loader 依赖node-sass  所以也得安装</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>npm run build 之后就会发现，css样式以style标签的形式，被插入在了<code>head</code>标签的顶部</p><p>如果想将css分离成独立的css文件，以link的形式引入，则需要用到<code>mini-extract-plugin</code>这个插件</p><p>修改配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  plugins:[ </span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename:<span class="string">'main.css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[ </span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">            <span class="comment">//用MiniCssExtractPlugin.loader 代替 style-loader</span></span><br><span class="line">            MiniCssExtractPlugin.loader,</span><br><span class="line">           <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="string">'sass-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>build之后就会发现，打包出来的main.css以link形式被引入到了html文件中。</p><p>如果想给css自动添加前缀，则需要安装<code>postcss-loader</code>和<code>autoprefixer</code>这两个插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">    use:[</span><br><span class="line">      MiniCssExtractPlugin.loader,</span><br><span class="line">      <span class="string">'css-loader'</span>,</span><br><span class="line">      <span class="string">'postcss-loader'</span>,</span><br><span class="line">      <span class="string">'sass-loader'</span> <span class="comment">// sass-loader 依赖node-sass  所以也得安装</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要给postcss添加一个配置文件才能使用postcss,根目录添加<code>postcss.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins:[<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前的js文件都是压缩的，想要css也压缩的话，需要使用插件<code>optimize-css-assets-webpack-plugin</code></p><p>修改配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCss = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123; <span class="comment">//优化项</span></span><br><span class="line">    minimizer:[</span><br><span class="line">      <span class="keyword">new</span> OptimizeCss()</span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后发现，css被压缩，但是js却没有压缩，这是因为optimization.minimizer属性后js就默认不被压缩了，使用<code>gulifyjs-webpack-plugin</code>插件可以压缩js</p><p>安装之后修改配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization:&#123; <span class="comment">//优化项</span></span><br><span class="line">    minimizer:[</span><br><span class="line">      <span class="keyword">new</span> OptimizeCssAssetsPlugin(),</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        cache:<span class="literal">true</span>,</span><br><span class="line">        parallel:<span class="literal">true</span> <span class="comment">//支持同时压缩多个</span></span><br><span class="line">      &#125;)</span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">'production'</span>, <span class="comment">//模式    默认 production 和 development</span></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次npm run build之后，文件都被压缩了</p><h2 id="处理js"><a href="#处理js" class="headerlink" title="处理js"></a>处理js</h2><h3 id="1-处理es6"><a href="#1-处理es6" class="headerlink" title="1. 处理es6+"></a>1. <strong>处理es6+</strong></h3><p>在index.js中写一些es6的语法，在build之后发现打包出来的js仍旧使用ES6写法，为了兼容性，我们需要转化成ES5的写法，这时候需要安装<code>babel</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure><p>修改配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> ...</span><br><span class="line">  <span class="built_in">module</span>:&#123;<span class="comment">//模块</span></span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">        use:&#123;</span><br><span class="line">          loader:<span class="string">'babel-loader'</span>, </span><br><span class="line">          options:&#123;</span><br><span class="line">            presets:[</span><br><span class="line">              <span class="string">'@babel/preset-env'</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后npm run build之后就可以将es6代码转化成es5代码了</p><p>接下来往index.js增加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    a=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A()</span><br><span class="line"><span class="built_in">console</span>.log(a.a)</span><br></pre></td></tr></table></figure></p><p><code>npm run build</code>之后发现提示需要安装<code>@babel/plugin-proposal-class-properties</code>插件，这是因为class属性目前处于提案中，所以babel通过单独插件的方式来支持编译。</p><p>安装这个插件之后修改配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> ...</span><br><span class="line">  <span class="built_in">module</span>:&#123;<span class="comment">//模块</span></span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">        use:&#123;</span><br><span class="line">          loader:<span class="string">'babel-loader'</span>, </span><br><span class="line">          options:&#123;</span><br><span class="line">            presets:[</span><br><span class="line">              <span class="string">'@babel/preset-env'</span></span><br><span class="line">            ]，</span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们要使用装饰器模式的话，需要安装插件<code>@babel/plugin-proposal-decorators</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@log</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A()</span><br><span class="line"><span class="built_in">console</span>.log(a.a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> ...</span><br><span class="line">  <span class="built_in">module</span>:&#123;<span class="comment">//模块</span></span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">        use:&#123;</span><br><span class="line">          loader:<span class="string">'babel-loader'</span>, </span><br><span class="line">          options:&#123;</span><br><span class="line">            presets:[</span><br><span class="line">              <span class="string">'@babel/preset-env'</span></span><br><span class="line">            ]，</span><br><span class="line">            plugins:[</span><br><span class="line">              <span class="comment">//注意安装顺序</span></span><br><span class="line">              [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              <span class="string">'@babel/plugin-proposal-class-properties'</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在test.js 写另外一个Class B，同时也写一些处理异步流程的Generator语法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(gen().next())</span><br></pre></td></tr></table></figure></p><p>打包之后，发现虽然将ES6转化为了ES5的语法，但是gemerator这中内置api并没有转化，所以需要安装插件<code>@babel/plugin-transform-runtime</code>,以及在生产环境下注入一些脚本依赖的插件<code>@babel/runtime</code>，通过创建了一个helper方法将需要用到的公共方法抽离出来，避免了多个模块定义重复定义方法。</p><p>如果代码中存在一些实例上的方法，比如说数组的includes(),在编译的过程中是不会进行转化的，需要安装<code>@babel/polyfill</code>,因为需要在代码运行时使用，所以不能<code>--save-dev</code>来安装，插件会在Array的原型上重新实现个includes方法。</p><p>安装之后，修改配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"@babel/polyfill"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">"@babel/polyfill"</span>, <span class="string">"./src/index.js"</span>] </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过在入口文件添加polyfill插件，为打包之后的代码插入在原有的JS内置对象及方法上做向后兼容的处理的代码。比如说ES5里面的 Object 是没有自带 assign 方法的，那么你加载了babel-polyfill 之后，它就给 Object 扩展了一个 assign 方法，这样你就可以直接使用 Object.assign(obj1, obj2) 了</p><h3 id="2-增加eslint"><a href="#2-增加eslint" class="headerlink" title="2. 增加eslint"></a>2. <strong>增加eslint</strong></h3><p>添加eslint可以对我们的代码添加一些语法规范的校验</p><p>安装 <code>npm i eslint eslint-loader -D</code></p><p>在配置文件中添加loader<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">            use:&#123;</span><br><span class="line">                loader:<span class="string">'eslint-loader'</span>,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    enforce:pre <span class="comment">//强制在最前面执行，最先执行的loader</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以在eslint官网根据自己的需求勾选不同的规则，最终生成<code>.eslintrc.json</code>文件放置在项目的根目录中。</p><h2 id="全局变量引入"><a href="#全局变量引入" class="headerlink" title="全局变量引入"></a>全局变量引入</h2><h3 id="暴露到全局对象上"><a href="#暴露到全局对象上" class="headerlink" title="暴露到全局对象上"></a>暴露到全局对象上</h3><p>想要全局引用某个变量，需要用到<code>expose-loader</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  i expose-loader -D</span><br></pre></td></tr></table></figure><p>在index.js中引入 jquery的 <code>$</code> 并暴露给window对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &apos;expose-loader?$!jquery&apos;</span><br><span class="line"></span><br><span class="line">console.log(window.$)</span><br></pre></td></tr></table></figure><p>npm run dev 之后控制台可以打印出$对象</p><p>也可以再webpack配置文件中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="built_in">require</span>.resolve(<span class="string">'jquery'</span>), <span class="comment">//匹配模块中对jq的引用</span></span><br><span class="line">            use:<span class="string">'expose-loader?$'</span>  <span class="comment">//暴露给全局的window.$</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式需要在使用的文件中手动的import jquery,还有另外一种方式，可以将$注入到每个模块中这样我们就可以任意的使用$而不需要手动引入了</p><h3 id="注入到每个模块"><a href="#注入到每个模块" class="headerlink" title="注入到每个模块"></a>注入到每个模块</h3><p>需要使用到webpack的插件 在配置文件的plugin中添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="comment">//在每个模块中都注入$</span></span><br><span class="line">      $:<span class="string">'jquery'</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="引入不打包"><a href="#引入不打包" class="headerlink" title="引入不打包"></a>引入不打包</h3><p>如果我们通过import等引入了jq,但不希望webpack把这个库打包进bundle,js  就可以使用<code>externals</code>,在配置文件中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    externals:&#123;</span><br><span class="line">        jquery:<span class="string">'$'</span> <span class="comment">//引入$ 不打包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式就需要依赖运行环境包含<code>$</code></p><blockquote><p>总结 <br><br>1.expose-loader 暴露到window上  <br><br>2.webpack.ProvideOlugin 注入到每个模块 <br><br>3.引入不打包 <br></p></blockquote><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><p>在js中通过import或者require来引入图片，是一个字符串，并不能被webpack识别，需要使用<code>file-loader</code>来处理图片的路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i file-loader -D</span><br></pre></td></tr></table></figure><p>在配置文件中添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/.\(jpg,png,gif)$/</span>,</span><br><span class="line">            <span class="comment">//css中引入的图片会被css-loader处理成require方式引入</span></span><br><span class="line">            use:<span class="string">'file-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想要在HTML文件中引入图片，需要使用loader <code>html-withimg-loader</code>,解析出html中的图片引入</p><p>安装之后配置rules<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/\.html$/</span>,</span><br><span class="line">            use:<span class="string">'html-withimg-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开发中图片很多，一些比较小的图片可以转化成base64格式，从而减少http请求，需要用到<code>url-loader</code></p><p>安装之后修改配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line"><span class="comment">// 当图片小于200k时转化为base64格式</span></span><br><span class="line"><span class="comment">// 大于则使用url-loader内置的file-loader处理</span></span><br><span class="line">use: &#123;</span><br><span class="line">loader: <span class="string">'url-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">limit: <span class="number">200</span>*<span class="number">1024</span>,</span><br><span class="line">outputPath:<span class="string">'/img/'</span>, </span><br><span class="line">PubilcPath:<span class="string">'https://daojia.jd.com'</span> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="打包多页应用"><a href="#打包多页应用" class="headerlink" title="打包多页应用"></a>打包多页应用</h2><p>之前的配置都是针对单页面应用，接下来配置多页面应用。</p><p>src下新建index.js 和 other.js两个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode:<span class="string">'development'</span>,</span><br><span class="line">    <span class="comment">//多入口</span></span><br><span class="line">    entry:&#123;</span><br><span class="line">        home:<span class="string">'./src/index.js'</span>,</span><br><span class="line">        pther:<span class="string">'./src/other.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">'[name].[hash]js'</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//需要配置多个 HTMLWebpackPlugin  chunks 表示页面的入口文件</span></span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            template:<span class="string">'./src/index.html'</span>,</span><br><span class="line">            filename:<span class="string">'home.html'</span>,</span><br><span class="line">            chunks:[<span class="string">'home'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            template:<span class="string">'./src/other.html'</span>,</span><br><span class="line">            filename:<span class="string">'other.html'</span>,</span><br><span class="line">            chunks:[<span class="string">'other'</span>,<span class="string">'home'</span>] <span class="comment">//写多个，会引用多个js</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h2><p>打包之后，代码压缩成一行，如果代码有错误，我们很难在压缩后的代码中定位到错误，这个时候就需要通过webpack的devtool配置来进行源码的映射。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    devtool:<span class="string">'source-map'</span>, <span class="comment">//增加映射文件，方便调试源码，会生成一个sourcemap文件，显示错误的行和列</span></span><br><span class="line">    <span class="comment">//devtool:'eval-source-map'  不会产生单独source-map 文件，集成在代码中</span></span><br><span class="line">    <span class="comment">//devtool:'cheap-module-source-map' 产生单独的source-map 不会提示错误在第几行</span></span><br><span class="line">    <span class="comment">//devtool:'cheap-module-eval-source-map'  不会产生文件，不提示列，只提示行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watch-实时打包"><a href="#watch-实时打包" class="headerlink" title="watch 实时打包"></a>watch 实时打包</h2><p>通过打开watch属性是实现时时打包,这样就可以真机调试了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    watch:<span class="literal">true</span>,</span><br><span class="line">    watchOptions:&#123;</span><br><span class="line">        poll:<span class="number">1000</span>,  监控的间隔时间,一秒检查一次是否需要打包</span><br><span class="line">        aggregateTimeout:<span class="number">500</span> <span class="comment">// 防抖，输入500毫秒后无输入再打包</span></span><br><span class="line">        ignore:<span class="regexp">/node_modules/</span> <span class="comment">//不需要监控的文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每次都改之后都会自动重新打包</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li><p>CleanWebpackPlugin</p><p>作用是打包之前清空dist目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">       <span class="keyword">new</span> CleanWebpackPlugin(<span class="string">'./dist'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>CopyWebpackPlugin</p><p>作用是打包时复制文件到打包的目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">       <span class="keyword">new</span> CleanWebpackPlugin([</span><br><span class="line">       &#123; <span class="attr">from</span>:<span class="string">'./public'</span>,<span class="attr">to</span>:<span class="string">'./'</span>&#125; <span class="comment">//从哪拷贝到哪</span></span><br><span class="line">       ])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>BannerPlugin (内置)</li></ul><p>作用是给打包后的js和css文件头部添加注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'我是需要添加的注释'</span>)</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>开发过程中都是localhost本地服务，就会遇到接口请求的跨域问题。</p><p>一、可以通过webpack配置devServer.proxy设置代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">proxy:&#123;</span><br><span class="line">    <span class="string">'api/'</span>:&#123;</span><br><span class="line">        target:<span class="string">'baidu.com'</span>, <span class="comment">//需要代理到的url</span></span><br><span class="line">        pathRewrite:&#123;</span><br><span class="line">            <span class="string">'/api'</span>:<span class="string">''</span>  <span class="comment">//将/api重写</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、如果前端需要mock数据,可以利用webpack内置的express 服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">    before(app)&#123;</span><br><span class="line">        app.get(<span class="string">'/api'</span>,(req,res)=&gt;&#123;</span><br><span class="line">            res.json(&#123;</span><br><span class="line">                xxx:xxx</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><p>resolve可以解析第三方的包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    rules:[],</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        modules:[path.resolve(<span class="string">'node_modules'</span>)], <span class="comment">//指定优先查找当前目录的node_modules</span></span><br><span class="line">        alias:&#123;</span><br><span class="line">            <span class="comment">//配置别名</span></span><br><span class="line">            <span class="string">'bootstrap'</span>:<span class="string">'./dist/js/...'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        extensions:[<span class="string">'js'</span>,<span class="string">'css'</span>,<span class="string">'jsx'</span>,<span class="string">'vue'</span>], <span class="comment">//按照这个顺序查找后缀的文件</span></span><br><span class="line">        mainFields:[<span class="string">'main'</span>,<span class="string">'style'</span>,<span class="string">'css'</span>], <span class="comment">//引用的文件的主入口字段，对应packages.json</span></span><br><span class="line">        mainFiles:[<span class="string">'main'</span>],  <span class="comment">//主入口文件的名字 默认是index</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">DEV: <span class="string">"'dev'"</span>, <span class="comment">// JSON.stringify('dev')</span></span><br><span class="line">TAG:<span class="string">'true'</span> <span class="comment">//boolean 类型</span></span><br><span class="line">&#125;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区分不同环境"><a href="#区分不同环境" class="headerlink" title="区分不同环境"></a>区分不同环境</h2><p>可以将不同环境的配置文件分开写</p><ul><li>webpack.dev.js</li><li>webpack.base.js</li><li>webpack.prod.js</li></ul><p>base写基础的配置，通过插件 webpack-merge 来合并到dev 和 prod 文件中</p><p>webpack.dev.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; smart &#125; = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">let</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smart(base,&#123;</span><br><span class="line">    mode:<span class="string">'development'</span>,</span><br><span class="line">    <span class="comment">// 其他配置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>webpack.prod.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; smart &#125; = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">let</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smart(base,&#123;</span><br><span class="line">    mode:<span class="string">'production'</span>,</span><br><span class="line">    <span class="comment">// 其他配置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改project.json 中 脚本执行命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"scripts"</span>:&#123;</span><br><span class="line">        <span class="string">"dev"</span>:<span class="string">"webpack --config webpack.dev.js"</span>,</span><br><span class="line">        <span class="string">"build"</span>:<span class="string">"webpack --config webpack.prod.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>webpack优化</p></blockquote><h2 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h2><p>wekpack的module有一个 noParse 属性，可以设置不解析引入库的依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    noParse:<span class="regexp">/jquery/</span>  <span class="comment">//不解析jquery的依赖 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ignorePlugin"><a href="#ignorePlugin" class="headerlink" title="ignorePlugin"></a>ignorePlugin</h2><p>这是webpack的内置插件，当项目中引入了库的时候，这些库还会引入其他一些库，可以通过这个插件将这些引入的库忽略，减小打包的体积。</p><p>例如引用monment这个库时，会引入很多语言包文件，这些对于我们来说并不需要，这些包都存放在./locale目录下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="comment">//忽略 moment 引入的库</span></span><br><span class="line">        <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/./</span>locale/,/moment/)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dllPlugin"><a href="#dllPlugin" class="headerlink" title="dllPlugin"></a>dllPlugin</h2><p>通过提供分离包的方式来提升构建时间性能，使打包更快。其主要思想就是 将一些不做修改的依赖文件，提前打包，这样再发布前打包代码的时候就不需要对这部分代码进行打包。</p><p>在原来打包文件的基础上，新建一个webpack.dll.conf.js，webpack.dll.config.js作用是把所有的第三方库依赖打包到一个bundle的dll文件里面，还会生成一个名为 manifest.json文件，manifest.json的作用是用来让 DllReferencePlugin 映射到相关的依赖上去的</p><p><em>DllReferencePlugin</em></p><p>这个插件是在webpack.config.js中使用的，该插件的作用是把刚刚在webpack.dll.config.js中打包生成的dll文件引用到需要的预编译的依赖上来.就是说在webpack.dll.config.js中打包后比如会生成 vendor.dll.js文件和vendor-manifest.json文件，vendor.dll.js文件包含所有的第三方库文件，vendor-manifest.json文件会包含所有库代码的一个索引，当在使用webpack.config.js文件打包DllReferencePlugin插件的时候，会使用该DllReferencePlugin插件读取vendor-manifest.json文件，看看是否有该第三方库。vendor-manifest.json文件就是有一个第三方库的一个映射</p><p>只需要对这些第三方库打包一次，以后每次打包webpack.conf.js的时候，只需要打包项目的代码，当使用到第三方依赖的时候，会使用DllReferencePlugin 读取已经提前打包好的第三方库，从而提高打包速度，当第三方库有更新的时候，咋需要从新打包webpack.dll.conf.js </p><p>webpack.dll.conf.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        vender:[</span><br><span class="line">            <span class="string">'react'</span>,</span><br><span class="line">            <span class="string">'react-dom'</span>,</span><br><span class="line">            <span class="string">'babel-polyfill'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">'[name].dll.js'</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">        library:<span class="string">'[name]_library'</span> <span class="comment">//可选，暴露出的全局变量名字</span></span><br><span class="line">        <span class="comment">// 主要是给DllPlugin中的name使用，</span></span><br><span class="line">        <span class="comment">// 所以这里需要和webpack.DllPlugin中的`name: '[name]_library',`保持一致</span></span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">            path: path.join(__dirname, <span class="string">'dist'</span>, <span class="string">'[name]-manifest.json'</span>), <span class="comment">//生成上文说到清单文件，放在dist文件下面</span></span><br><span class="line">            name: <span class="string">'[name]_library'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.conf.js</p><p>先安装add-asset-html-webpack-plugin这个插件，目的是给生成的vender.dll.js加上hash值,然后插入到htmk中去 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">          <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">                context: path.resolve(__dirname, <span class="string">'..'</span>),  <span class="comment">//manifest文件中请求的上下文</span></span><br><span class="line">                manifest: <span class="built_in">require</span>(<span class="string">'./dist/vendor-manifest.json'</span>)</span><br><span class="line">            &#125;),</span><br><span class="line">    <span class="comment">//这个主要是将生成的vendor.dll.js文件加上hash值插入到页面中。</span></span><br><span class="line">    <span class="keyword">new</span> AddAssetHtmlPlugin([&#123;</span><br><span class="line">      filepath: path.resolve(__dirname,<span class="string">'../dist/js/vendor.dll.js'</span>),\</span><br><span class="line">      includeSourcemap: <span class="literal">false</span>,</span><br><span class="line">      hash: <span class="literal">true</span></span><br><span class="line">    &#125;]),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在package.json中配置运行命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"scripts"</span>:&#123;</span><br><span class="line">        <span class="string">"build:dll"</span>: <span class="string">"webpack --config webpack.dll.conf.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="happypack"><a href="#happypack" class="headerlink" title="happypack"></a>happypack</h2><p>happypack 可以开启多线程打包，这对于比较大的项目，可以提高打包速度。</p><p><code>npm i happypack -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> happypack = <span class="built_in">require</span>(<span class="string">'happypack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> happypack(&#123;</span><br><span class="line">            id:<span class="string">'js'</span>,</span><br><span class="line">            use:[&#123;</span><br><span class="line">                loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    preset:[<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> happypack(&#123;</span><br><span class="line">            id:<span class="string">'css'</span>,</span><br><span class="line">            use:[</span><br><span class="line">                MiniCssExtractPlugin.loader,</span><br><span class="line"><span class="string">'css-loader'</span>,</span><br><span class="line"><span class="string">'postcss-loader'</span></span><br><span class="line">]</span><br><span class="line">        &#125;)，</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line"><span class="comment">//js用happypack/loader多线程打包</span></span><br><span class="line">use: <span class="string">'happypack/loader?id=js'</span>,</span><br><span class="line">include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line"><span class="comment">//css用happypack/loader多线程打包</span></span><br><span class="line">use: <span class="string">'happypack/loader?id=css'</span>,</span><br><span class="line">include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于分配多线程也需要占用时间，因此在比较小的项目上效果不明显。</p><h2 id="webpack自带优化"><a href="#webpack自带优化" class="headerlink" title="webpack自带优化"></a>webpack自带优化</h2><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h3><p>通过import 语法引入的模块，在生产环境下，会自动去掉没用到的代码，这就是tree-shking,require不支持</p><p> <a href="https://juejin.im/post/5a4dc842518825698e7279a9" target="_blank" rel="noopener">Tree-Shaking性能优化实践-原理篇</a></p><p><a href="https://juejin.im/post/5a4dca1d518825128654fa78" target="_blank" rel="noopener">Tree-Shaking性能优化实践 - 实践篇</a></p><p><a href="http://blog.ctomorrow.top/2019/02/15/tree-shaking/" target="_blank" rel="noopener">Webpack4:Tree-shaking深度解析</a></p><h3 id="scope-hosting"><a href="#scope-hosting" class="headerlink" title="scope hosting"></a>scope hosting</h3><p>作用域提升，可以自动省略，可以简化的代码</p><p><a href="https://zhuanlan.zhihu.com/p/27980441" target="_blank" rel="noopener">Webpack 3 的新功能：Scope Hoisting</a></p><h2 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h2><p>将公共部分代码单独抽离出来引用</p><p><a href="http://blog.ctomorrow.top/2019/02/15/tree-shaking/" target="_blank" rel="noopener">理解webpack4.splitChunks</a></p><p><a href="https://imweb.io/topic/5b66dd601402769b60847149" target="_blank" rel="noopener">webpack 4 Code Splitting 的 splitChunks 配置探索</a></p><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>通过 es6 的 import 语法动态的导入 需要引入的文件</p><p>需要安装插件 <code>@babel/plugin-syntax-dynamic-import</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.js$/</span>，</span><br><span class="line">                use:&#123;</span><br><span class="line">                    loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        presets:[</span><br><span class="line">                            <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                            <span class="string">'@babel/preset-react'</span></span><br><span class="line">                        ],</span><br><span class="line">                        plugins:[</span><br><span class="line">                            <span class="string">'@babel/plugin-syntax-dynamic-import'</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./index.js'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.default)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打包之后发现，webapck将动态引入的文件打包成了 1.js </p><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>文件更新之后，不会刷新页面，起到部分刷新的作用</p><p>需要两个步骤：</p><ul><li>使用 HotModuleReplacementPlugin 插件</li><li>打开 webpack-dev-server 的热更新开关</li></ul><p>Webpack 的热更新，其实只是提供一套接口和基础的模块替换的实现。作为开发者，需要在代码中通过热更新接口（module.hot.xxx）向 Webpack 声明依赖模块和当前模块是否能够更新，以及更新的前后进行的处理。</p><p>如果接受更新，那么需要开发者自己来在模块被替换前清理或保留必要的数据、状态，并在模块被替换后恢复之前的数据、状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;本地安装&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install webapck webpack-cli --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://longmimi.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://longmimi.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>jQuery使用总结</title>
    <link href="http://longmimi.github.io/2017/04/23/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://longmimi.github.io/2017/04/23/jQuery学习笔记/</id>
    <published>2017-04-22T17:10:59.000Z</published>
    <updated>2021-08-12T00:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;暑假的时候虽然说学习过一遍jQuery了，但只是眼过一遍，熟悉了基本的使用并没有做记录，趁着学校这两天学校运动会放假，决定整理一篇jQuery的笔记，方便以后复习,以上均通过<a href="http://www.w3cschool.cn/jquery/" target="_blank" rel="noopener">w3school</a>学习。</p><hr><a id="more"></a><h2 id="课程章结"><a href="#课程章结" class="headerlink" title="课程章结"></a>课程章结</h2><h3 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h3><p><strong>关键词</strong>：<strong>简介</strong>、<strong>安装</strong>、<strong>语法</strong>、<strong>选择器</strong>、<strong>事件</strong>、<strong>名称冲突</strong></p><ul><li><p>简介：jQuery是一个JavaScript函数库,它的宗旨是“write less，do more”,也就是一个轻量级的”写的少，做的多”的JavaScript库。</p></li><li><p>安装：    </p><ul><li>下载<a href="http://jquery.com/download/" target="_blank" rel="noopener">jQuery</a>到本地，从本地载入</li><li>引用CDN中加载jQuery<ul><li>使用以下代码可以加载CDN，使用引用CDN的方式有一个很大的优势就是许多用户在访问其他站点的时候已经加载过jQuery，结果就是当这些人访问站点时，会直接从缓存中加载jQuery，从而减少加载时间。而且，大多数CDN都可以确保用户在请求文件时，从最近的服务器上返回响应，从而提高加载速度；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>语法：</p><ul><li>jQuery的基本语法是<code>$(selector).action()</code><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>action()函数 执行对元素的操作</li></ul></li><li>为了防止文档在完全加载（就绪）之前运行 jQuery 代码，<code>$(document).ready(function(){});</code>将jQuery函数写在这个函数中</li></ul></li><li>选择器<ul><li>常见的选择器有以下几种：<ul><li>元素选择器：<code>$(&#39;p&#39;)</code></li><li>id选择器：<code>$(&#39;#id&#39;)</code></li><li>.class选择器：<code>$(&quot;.class&quot;)</code></li><li><code>$(&#39;p.test&#39;)</code>表示选择类别名为test的p标签</li><li><code>$(&quot;a[target=&#39;_blank&#39;]&quot;)</code>：表示选取所有<code>target</code>属性值为<code>_blank</code>的<code>a</code>标签</li><li>更多可参考<a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp" target="_blank" rel="noopener">jquery选择器手册</a></li></ul></li></ul></li><li>事件<ul><li>jQuery事件处理方法是jQuery的核心函数，事件处理程序指的是当HTML中发生某些事件所调用的方法，也叫作“触发”；（通常把jQuery代码放在<head><meta name="generator" content="Hexo 3.8.0">部分的事件处理方法中；详细的事件参考<a href="http://www.w3school.com.cn/jquery/jquery_ref_events.asp" target="_blank" rel="noopener">jQuery事件手册</a> </head></li><li>可以分为：鼠标事件（click），键盘事件(keypress)，表单事件(submit)，文档/窗口事件(load、scroll)等等</li><li>实例:<ul><li><code>$(this).hide()</code> - 隐藏当前元素</li><li><code>$(&quot;p&quot;).hide()</code> - 隐藏所有段落</li><li><code>$(&quot;p .test&quot;).hide()</code> - 隐藏所有 class=”test” 的段落</li><li><code>$(&quot;#test&quot;).hide()</code> - 隐藏所有 id=”test” 的元素</li><li><code>$(&#39;p&#39;).click(function(){});</code>-点击p元素执行函数</li></ul></li></ul></li><li>名称冲突<ul><li>由于其他库也可能使用$符号，那么就会引起冲突，jQuery中使用noConflict()方法来解决这个问题</li><li>注意事项<ul><li>把所有的jQuery代码置于事件处理函数中；</li><li>把所有事件处理函数置于文档就绪事件处理器中；</li><li>把jQuery代码置于单独的.js文件中;</li><li>如果存在名称冲突，则重命名jQuery库；</li></ul></li></ul></li></ul><p><em>示例</em></p><iframe height="265" scrolling="no" title="jQuery1" src="//codepen.io/longtean/embed/vmGQyj/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/vmGQyj/" target="_blank" rel="noopener">jQuery1</a> by LongTean (<a href="http://codepen.io/longtean" target="_blank" rel="noopener">@longtean</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h3 id="jquery效果"><a href="#jquery效果" class="headerlink" title="jquery效果"></a>jquery效果</h3><p><strong>关键词</strong>：<strong>隐藏显示</strong>、<strong>淡入淡出</strong>、<strong>滑动</strong>、<strong>动画</strong>、<strong>stop()</strong>、<strong>callback方法</strong>、<strong>chaining</strong></p><ul><li>显示隐藏<ul><li>show(),hide(),比如隐藏的使用语法为：<code>$(&#39;selector&#39;).hide(speed,callback)</code>,其中speed为速度，callback为完成隐藏动作后执行的函数，另外，toggle()可以显示和隐藏</li></ul></li><li>淡入淡出<ul><li>有fadeIn(),fadeToggle(),fadeTo(),使用语法同上，fadeTo(speed,opacity,callback)可以改变透明度。</li></ul></li><li>滑动<ul><li>slideDown(),slideToggle(speed，callback)</li></ul></li><li><p>动画</p><ul><li><p>animate()方法,使用语法为<code>$(selector).animate({params},speed,callback);</code>必需的 params 参数定义形成动画的 CSS 属性,可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒,可选的 callback 参数是动画完成后所执行的函数名称。</p><ul><li><p>例:点击按钮，将div元素向右移动250px的同时，将透明度变为0.5且高度变为150px宽边为150px</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">  left:<span class="string">'250px'</span>,</span><br><span class="line">  opacity:<span class="string">'0.5'</span>,</span><br><span class="line">  height:<span class="string">'150px'</span>,</span><br><span class="line">  width:<span class="string">'150px'</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>需要注意的是css属性名必须像这么写：marginLeft。。。骆驼命名法吧</p></li></ul></li></ul></li><li>stop()<ul><li>用来在动画或效果完成前对他们停止，使用语法<code>$(selector).stop(stopAll,goToEnd);</code>,其中可选参数stopAll规定是否应该清除动画队列，默认是false，即仅停止活动的动画，但允许队列中的其他动画执行；可选参数goToEnd表示是否立即完成当前动画，默认为false；</li></ul></li><li>callback()<ul><li>此函数在当前动画100%完成之后执行；因为JS语句是逐一执行的，为了避免因为动画还没执行完成而造成动画与之后的语句之间可能产生的错误或者页面冲突，建议以参数的形式添加Callback函数；</li></ul></li><li>chaining<pre><code>* Chaining允许我们在一条语句中添加多个方法，例如`$(&apos;p&apos;).css(&apos;color&apos;, &apos;red&apos;).slideUp(2000).slideDown(2000);`，这是p元素就会先改变css样式，然后收缩，最后张开；</code></pre><em>示例</em><iframe height="265" scrolling="no" title="jQuery2" src="//codepen.io/longtean/embed/BRKbQv/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/BRKbQv/" target="_blank" rel="noopener">jQuery2</a> by LongTean (<a href="http://codepen.io/longtean" target="_blank" rel="noopener">@longtean</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe></li></ul><h1 id="jquery-HTML"><a href="#jquery-HTML" class="headerlink" title="jquery HTML"></a>jquery HTML</h1><p><strong>关键词</strong>：<strong>捕获</strong>、<strong>设置</strong>、<strong>添加</strong>、<strong>删除</strong>、<strong>css类</strong>、<strong>css()</strong>、<strong>尺寸</strong></p><ul><li>捕获<ul><li>操作DOM的常用方法<ul><li><code>text()</code> - 设置或返回所选元素的文本内容</li><li><code>html()</code> - 设置或返回所选元素的内容（包括 HTML 标记）</li><li><code>val()</code> - 设置或返回表单字段的值</li></ul></li><li>获取属性的方法<ul><li><code>attr()</code>- 用于获取属性值</li></ul></li></ul></li><li>设置<ul><li>设置内容也是用上一节提到的三个函数，不过需要在括号中加入需要设置的内容；</li><li>同时需要知道，这三个jQuery方法都拥有回调函数，函数有两个参数，分别为被选元素列表中当前元素的下标以及原始值，text()、html() 以及 val() 的回调函数；</li><li>利用attr()来设置属性时可以同时设置多个属性，属性之间利用逗号隔开，此方法同样具有回调函数；</li></ul></li><li>添加元素<ul><li>利用jQuery可以很容易的添加新元素，具体有如下四个方法<ul><li><code>append()</code>- 在被选元素的结尾插入内容或元素</li><li><code>prepend()</code>-在被选元素的开头插入内容或元素；</li><li><code>after()</code>-在被选元素之后插入内容或元素；</li><li><code>before()</code>-在被选元素之前插入内容或元素；</li><li><code>append()</code>和<code>prepend()</code>方法能够通过参数接收无限数量的新元素。可以通过 jQuery 来生成文本/HTML，或者通过 JavaScript 代码和 DOM 元素。<blockquote><p>注意：append()在一个元素的尾部添加内容，不添加新节点，而after是在被选元素之后添加内容，添加了新节点。</p></blockquote></li></ul></li></ul></li><li>删除<ul><li>删除元素和添加元素类似，有以下几个方法<ul><li><code>remove()</code> -删除被选元素及其子元素，括号中可添加选择器，用于删除符合选择器条件的元素及其子元素；</li><li><code>empty()</code>-从被选元素中删除子元素；</li></ul></li></ul></li><li>css类<ul><li>利用jQuery可以很容易的操作css元素，主要方法有<ul><li><code>addClass()</code>-向被选元素添加一个或多个类（添加多个类的时候类名称之间用空格隔开）；</li><li><code>removeClass()</code>-从被选元素删除一个或多个类；</li><li><code>toggle()</code>-对被选元素添加/删除类的切换操作；</li></ul></li></ul></li><li>css()<ul><li>设置或返回被选元素的一个或多个样式属性，语法为<code>css(&#39;propertyName&#39;)</code>如果有多个满足被选条件，则只返回第一个元素的属性；</li><li>如需设置CSS属性，则需使用语法为<code>css(&#39;propertyName&#39;, &#39;value&#39;)</code>，此时将所有满足条件的元素的样式都设置成目标样式；</li></ul></li><li>尺寸<ul><li>通过jQuery很容易处理元素和浏览器窗口的尺寸，主要的方法如下：<ul><li><code>width()</code>-设置或返回元素的宽度（不包括内边距、边框和外边距），如果对象为document或者window，则表示返回HTML文档或者浏览器窗口的宽度和高度；如果在括号中加入数字，则表示将对应的尺寸设置为对应的值；</li><li><code>height()</code>-设置或返回元素的高度（不包括内边距、边框和外边距）；</li><li><code>innerWidth()</code>-返回元素的宽度（包括内边距）；</li><li><code>innerHeight()</code>-返回元素的高度（包括内边距）；</li><li><code>outerWidth()</code>-返回元素的宽度（包括内边距和边框），如果括号中增加参数‘true’则表示返回包括内外边距及边框的宽度；</li><li><code>outerHeight()</code>-返回元素的高度（包括内边距和边框），如果括号中增加参数‘true’则表示返回包括内外边距及边框的高度；</li></ul></li></ul></li></ul><p><em>示例</em></p><iframe height="265" scrolling="no" title="jQuery3" src="//codepen.io/longtean/embed/wdWgBE/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/longtean/pen/wdWgBE/" target="_blank" rel="noopener">jQuery3</a> by LongTean (<a href="http://codepen.io/longtean" target="_blank" rel="noopener">@longtean</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h1 id="jQuery遍历"><a href="#jQuery遍历" class="headerlink" title="jQuery遍历"></a>jQuery遍历</h1><p><strong>关键词</strong>：<strong>遍历</strong>、<strong>祖先</strong>、<strong>后代</strong>、<strong>同胞</strong>、<strong>过滤</strong></p><ul><li>遍历<ul><li>遍历用于根据其相对于其他元素的关系来查找或者选取HTML元素；</li><li>DOM遍历：遍历方法中最大的种类是树遍历<code>tree-traversal</code></li></ul></li><li>祖先<ul><li>祖先元素包括父元素、祖父元素等等，常用的方法为：<ul><li><code>parent()</code>-返回被选元素的直接父元素；</li><li><code>parents()</code>-返回被选元素的所有祖先元素，其中甚至包括文档的根元素；</li><li><code>parentsUntil()</code>-返回介于两个给定元素之间的祖先元素；</li></ul></li></ul></li><li>后代<ul><li>与祖先相对的，后代指的是子、孙、曾孙等，常用的方法为：<ul><li><code>children()</code>-返回被选元素的直接子元素；</li><li><code>find()</code>-返回被选元素的被find的元素，包括所有后代；</li></ul></li></ul></li><li>同胞<ul><li>同胞拥有相同的父元素，常用的方法为：<ul><li><code>siblings()</code>：返回所有被选元素的同胞元素；</li><li><code>next()</code>：返回被选元素的下一个同胞元素；</li><li><code>nextAll()</code>：返回被选元素的所有跟随的同胞元素；</li><li><code>nextUntil()</code>：返回介于两个给定参数之间的所有跟随的同胞元素；</li><li><code>prev()</code>：返回被选元素的上一个同胞元素；</li><li><code>prevAll()</code>:返回被选元素的所有前面的同胞元素；</li><li><code>prevUntil()</code>：返回介于两个给定参数之间的所有的同胞元素；</li></ul></li></ul></li><li>过滤<ul><li>缩小搜索元素的范围，常用的方位有以下几种：<ul><li><code>first()</code>：返回被选元素的首个子元素；</li><li><code>last()</code>：返回被选元素的最后一个元素；</li><li><code>eq()</code>：返回被选元素中带有指定索引号的元素；</li><li><code>filter()</code>：返回符合匹配标准的元素集合；</li><li><code>not()</code>：返回不匹配标准的所有元素集合；<h1 id="jquery-Ajax"><a href="#jquery-Ajax" class="headerlink" title="jquery Ajax"></a>jquery Ajax</h1>&emsp;AJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。<br>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。这一章我准备写一篇专门的博客来介绍，附上教程<a href="http://www.w3cschool.cn/ajax/" target="_blank" rel="noopener">ajax教程</a>.</li></ul></li></ul></li></ul><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;写了这么多，不仅是一种分享，希望更多地人看到，能对他们有所帮助，也是自己的一种总结，写在笔记本上的笔记会只属于自己，而写在这里的笔记，属于我们。<br>&emsp;共勉</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;暑假的时候虽然说学习过一遍jQuery了，但只是眼过一遍，熟悉了基本的使用并没有做记录，趁着学校这两天学校运动会放假，决定整理一篇jQuery的笔记，方便以后复习,以上均通过&lt;a href=&quot;http://www.w3cschool.cn/jquery/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;w3school&lt;/a&gt;学习。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://longmimi.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://longmimi.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jquery" scheme="http://longmimi.github.io/tags/jquery/"/>
    
  </entry>
  
</feed>
